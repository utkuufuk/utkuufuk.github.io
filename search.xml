<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Training a Simple Binary Classifier Using Logistic Regression</title>
    <url>/2018/05/19/binary-logistic-regression/</url>
    <content><![CDATA[<p>Logistic regression is a simple classification method which is widely used in the field of machine learning. Today we’re going to talk about how to train our own logistic regression model in Python to build a a binary classifier. We’ll use <a href="http://www.numpy.org/">NumPy</a> for matrix operations, <a href="https://www.scipy.org/">SciPy</a> for cost minimization, <a href="https://matplotlib.org/">Matplotlib</a> for data visualization and no machine learning tools or libraries whatsoever.</p>
<a id="more"></a>

<h4 id="Problem-amp-Dataset"><a href="#Problem-amp-Dataset" class="headerlink" title="Problem &amp; Dataset"></a>Problem &amp; Dataset</h4><p>We’ll be looking at another assignment from the <a href="https://www.coursera.org/learn/machine-learning">machine learning course</a> taught by <a href="http://www.andrewng.org/">Andrew Ng</a>. Our objective in this problem is to estimate an applicant’s probability of admission into a university based on his/her results on two exams. Our <a href="/2018/05/19/binary-logistic-regression/university_admission.txt" title="dataset">dataset</a> contains some historical data from previous applicants, which we’ll use as a training sample. Let’s read the dataset file and take a look at the first few examples:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> opt</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;university_admission.txt&#x27;</span>, delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">x = data[:, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">y = data[:, <span class="number">2</span>]</span><br><span class="line">print(data[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 34.62365962  78.02469282   0.        ]
 [ 30.28671077  43.89499752   0.        ]
 [ 35.84740877  72.90219803   0.        ]
 [ 60.18259939  86.3085521    1.        ]
 [ 79.03273605  75.34437644   1.        ]]</code></pre>
<p>The first two columns correspond to the exam scores and the third column indicates whether the applicant has been admitted to the university. We can visualize this data using a scatter plot:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">positives = np.where(y == <span class="number">1</span>)</span><br><span class="line">negatives = np.where(y == <span class="number">0</span>)</span><br><span class="line">ax.scatter(x[positives, <span class="number">0</span>], x[positives, <span class="number">1</span>], marker=<span class="string">&quot;+&quot;</span>, c=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">ax.scatter(x[negatives, <span class="number">0</span>], x[negatives, <span class="number">1</span>], marker=<span class="string">&quot;x&quot;</span>, c=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&quot;University Admission&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;exam 1 score&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;exam 2 score&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.legend([<span class="string">&quot;admitted&quot;</span>, <span class="string">&quot;not admitted&quot;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<img src="/2018/05/19/binary-logistic-regression/logistic-regression_5_0.png" class="">

<h4 id="Hypothesis-Function"><a href="#Hypothesis-Function" class="headerlink" title="Hypothesis Function"></a>Hypothesis Function</h4><p>Logistic regression is a linear model, which means that the <strong>decision boundary</strong> has to be a straight line. This can be achieved with a a simple hypothesis function in the following form:</p>
<p>$h_\theta(x) = g(\theta^Tx)$</p>
<p>where $g$ is the <strong>sigmoid function</strong> which is defined as:</p>
<p>$g(z) = \dfrac{1}{1 + e^{-z}}$</p>
<img src="/2018/05/19/binary-logistic-regression/sigmoid.png" class="" title="Sigmoid">
<br>

<p>Here’s the Python version of the sigmoid function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br></pre></td></tr></table></figure>
<p>The numeric output of the hypothesis function $h_\theta(x)$ corresponds to the model’s confidence in labeling the input:</p>
<ul>
<li>If the output is $0.5$, both classes are equally probable as far as the classifier is concerned.</li>
<li>If the output is $1$, the classifier is 100% confident about class 1.</li>
<li>If the output is $0$, the classifier is 100% confident about class 0.</li>
</ul>
<p>In other words, the classifier labels the input based on whether $\theta^Tx$ is positive or negative. Of course this is based on the assumption that the treshold is selected as $0.5$.</p>
<h4 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h4><p>In the training stage, we’ll try to minimize the cost function below:</p>
<p>$J(\theta) = \dfrac{1}{m}\sum\limits_{i=1}^{m}[-y^{(i)}log(h_\theta(x^{(i)})) - (1 - y^{(i)})log(1 - h_\theta(x^{(i)}))]$</p>
<p>Notice that this cost function penalizes the hypothesis according to its probability estimation error, as demonstrated below:</p>
<img src="/2018/05/19/binary-logistic-regression/cost.svg" class="" title="Cost">
<p>&lt;br &gt;</p>
<p>We can use the following Python function to compute this cost in our script:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">    predictions = sigmoid(X @ theta)</span><br><span class="line">    predictions[predictions == <span class="number">1</span>] = <span class="number">0.999</span> <span class="comment"># log(1)=0 causes division error during optimization</span></span><br><span class="line">    error = -y * np.log(predictions) - (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - predictions);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(error) / <span class="built_in">len</span>(y);</span><br></pre></td></tr></table></figure>
<h4 id="Optimization-Algorithm"><a href="#Optimization-Algorithm" class="headerlink" title="Optimization Algorithm"></a>Optimization Algorithm</h4><p>We’re going to use the <strong><code>fmin_cg</code></strong> function from <strong><code>scipy.optimize</code></strong> to minimize our cost. <strong><code>fmin_cg</code></strong> needs the gradient of the cost function as well as the cost function itself. Here’s the formula for the cost gradient:</p>
<p>$\dfrac{\partial{J(\theta)}}{\partial{\theta_j}} = \dfrac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)})x^{(i)}_j$</p>
<p>where $m$ is the number of training examples.</p>
<p>And the Python version is:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost_gradient</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">    predictions = sigmoid(X @ theta);</span><br><span class="line">    <span class="keyword">return</span> X.transpose() @ (predictions - y) / <span class="built_in">len</span>(y)</span><br></pre></td></tr></table></figure>
<p>If you’re not familiar with <strong><code>fmin_cg</code></strong>, it might be a good idea to check out my <a href="/2018/05/04/learning-curves/" title="previous post">previous post</a> and/or the <a href="https://docs.scipy.org/doc/scipy-0.19.0/reference/generated/scipy.optimize.fmin_cg.html">official docs</a> before proceeding to the next section.</p>
<h4 id="Training-Stage"><a href="#Training-Stage" class="headerlink" title="Training Stage"></a>Training Stage</h4><p>The final thing we need to do before training our model is to add an additional first column to $x$, in order to account for the intercept term $\theta_0$:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.ones(shape=(x.shape[<span class="number">0</span>], x.shape[<span class="number">1</span>] + <span class="number">1</span>))</span><br><span class="line">X[:, <span class="number">1</span>:] = x</span><br></pre></td></tr></table></figure>
<p>Finally we can train our logistic regression model:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">initial_theta = np.zeros(X.shape[<span class="number">1</span>]) <span class="comment"># set initial model parameters to zero</span></span><br><span class="line">theta = opt.fmin_cg(cost, initial_theta, cost_gradient, (X, y))</span><br></pre></td></tr></table></figure>
<pre><code>Optimization terminated successfully.
         Current function value: 0.203498
         Iterations: 51
         Function evaluations: 122
         Gradient evaluations: 122</code></pre>
<p>Now let’s plot the decision boundary of our optimized model:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_axis = np.array([<span class="built_in">min</span>(X[:, <span class="number">1</span>]) - <span class="number">2</span>, <span class="built_in">max</span>(X[:, <span class="number">1</span>]) + <span class="number">2</span>])</span><br><span class="line">y_axis = (-<span class="number">1</span> / theta[<span class="number">2</span>]) * (theta[<span class="number">1</span>] * x_axis + theta[<span class="number">0</span>])</span><br><span class="line">ax.plot(x_axis, y_axis, linewidth=<span class="number">2</span>)</span><br><span class="line">fig</span><br></pre></td></tr></table></figure>
<img src="/2018/05/19/binary-logistic-regression/logistic-regression_13_0.png" class="">
<br>
Looks pretty good. Let's also measure the training accuracy:

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions = np.zeros(<span class="built_in">len</span>(y))</span><br><span class="line">predictions[sigmoid(X @ theta) &gt;= <span class="number">0.5</span>] = <span class="number">1</span></span><br><span class="line">print(<span class="string">&quot;Training Accuracy =&quot;</span>, <span class="built_in">str</span>(np.mean(predictions == y) * <span class="number">100</span>) + <span class="string">&quot;%&quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Training Accuracy = 89.0%</code></pre>
<p>Not bad at all. We would probably need something little more flexible than logistic regression if we wanted to come up with a more accurate classifier.</p>
<h4 id="Prediction"><a href="#Prediction" class="headerlink" title="Prediction"></a>Prediction</h4><p>Finally, here’s how we can predict the probability of admission for a student with arbitrary exam scores:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">probability = sigmoid(np.array([<span class="number">1</span>, <span class="number">45</span>, <span class="number">85</span>]) @ theta)</span><br><span class="line">print(<span class="string">&quot;For a student with scores 45 and 85, we predict an admission probability of&quot;</span>, probability)</span><br></pre></td></tr></table></figure>
<pre><code>For a student with scores 45 and 85, we predict an admission probability of 0.776195474168</code></pre>
<p>If you’re still here, you should <a href="%5Csubscribe">subscribe</a> to get updates on my future articles.</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Tutorial on Building a Chess Game &amp; AI Using Eclipse RCP</title>
    <url>/2018/06/17/alpha-beta-chess/</url>
    <content><![CDATA[<p>Hi all, I’ve put together a <a href="https://www.youtube.com/watch?list=PL36SguL4LIwmhgHkziX-2C91SOTQl1rEL&v=zacLahqmlf0">YouTube video series</a> on developing an Eclipse RCP application in Java to build a chess game with a cool AI algorithm called alpha-beta pruning. You need no prior knowledge on Eclipse RCP to follow along, but a basic understanding of the Java programming language would definitely help.</p>
<a id="more"></a>

<h4 id="TLDR-Here’s-the-YouTube-Playlist"><a href="#TLDR-Here’s-the-YouTube-Playlist" class="headerlink" title="TLDR: Here’s the YouTube Playlist"></a>TLDR: Here’s the YouTube Playlist</h4><iframe
    src="https://www.youtube.com/embed/videoseries?list=PL36SguL4LIwmhgHkziX-2C91SOTQl1rEL"
    width="560" height="315" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen>
</iframe>

<h4 id="What-Is-It"><a href="#What-Is-It" class="headerlink" title="What Is It?"></a>What Is It?</h4><p>I started developing the first version of this application a few years ago while learning Java. After a while, I started to learn Eclipse RCP and thought it would be a good idea to build a GUI for my chess game on this platform. Then recently I took an AI course and learned about minimax and alpha-beta pruning algorithms. So I decided to rewrite the application and plug these algorithms in so that I could improve the AI, while recording the whole development process. It took a few months and most of my spare time, and finally it’s complete. I hope you like it!</p>
<h4 id="Who-Is-It-For"><a href="#Who-Is-It-For" class="headerlink" title="Who Is It For?"></a>Who Is It For?</h4><p>You might like this tutorial if you</p>
<ul>
<li>are a beginner in Java and want to learn more about the language (or object-oriented programming in general)</li>
<li>want to learn how to build a simple Eclipse RCP application</li>
<li>are interested in watching the whole process of building a chess game from scratch</li>
<li>want to see the minimax &amp; alpha-beta pruning algorithms in action</li>
<li>are <strong>NOT</strong> looking for a detailed tutorial and discussion focused solely on AI or the alpha-beta pruning algorithm</li>
</ul>
<h4 id="Playlist-Overview"><a href="#Playlist-Overview" class="headerlink" title="Playlist Overview"></a>Playlist Overview</h4><p>There are a total of 30 videos in the playlist, which is organized as follows:</p>
<table>
<thead>
<tr>
<th align="center">Video #</th>
<th>Topic</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td>Introduction</td>
</tr>
<tr>
<td align="center">2 to 11</td>
<td>Coding the building blocks (board, square, piece etc.)</td>
</tr>
<tr>
<td align="center">12 to 16</td>
<td>Evaluating the legal moves for different chess pieces</td>
</tr>
<tr>
<td align="center">17 to 23</td>
<td>Building the GUI, UX and game mechanics</td>
</tr>
<tr>
<td align="center">27 to 30</td>
<td>Implementing the AI (minimax, alpha-beta-pruning &amp; iterative deepening)</td>
</tr>
</tbody></table>
<h4 id="Sound-Issues"><a href="#Sound-Issues" class="headerlink" title="Sound Issues"></a>Sound Issues</h4><p>I apologize for the poor sound quality in the first several videos, especially the one after the intro. Unfortunately, I had to use my laptop’s built-in microphone because I didn’t have one. Thankfully the sound gets better <a href="https://www.youtube.com/watch?v=PWZ_6B7pKYc">after a while</a> because I managed to get my hands on a decent microphone later on.</p>
<h4 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h4><p>Feel free to check out the <a href="https://github.com/utkuufuk/alpha-beta-chess">github repo</a> if you are interested in contributing. I’m aware that there are lots of missing features such as:</p>
<ul>
<li>En passant </li>
<li>Pawn promotion</li>
<li>Castling</li>
<li>Check &amp; checkmate (I know…)</li>
<li>Potential optimizations regarding the AI</li>
<li>UX improvements</li>
</ul>
<p>Make sure to <a href="/subscribe">subscribe</a> if you want to get updates on my future articles.</p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Java</tag>
        <tag>Game Development</tag>
      </tags>
  </entry>
  <entry>
    <title>A CLI App to Insert Budget Transactions in Google Spreadsheets</title>
    <url>/2018/11/10/budget-cli/</url>
    <content><![CDATA[<p>If you use Google Spreadsheets for personal budget management and also like to get things done from the command line as much as possible, I have some good news for you. I’ve built a <a href="https://github.com/utkuufuk/budget-cli">CLI app</a> to insert transaction entries in monthly budget spreadsheets with simple commands from CLI. Today I’ll be walking you through the process of building this app.</p>
<a id="more"></a>

<h4 id="Monthly-Budget-Spreadsheet"><a href="#Monthly-Budget-Spreadsheet" class="headerlink" title="Monthly Budget Spreadsheet"></a>Monthly Budget Spreadsheet</h4><p>If you don’t have one already, you can go ahead and create a <em>monthly budget</em> template from the <a href="https://docs.google.com/spreadsheets/u/0/?ftv=1&folder=0ACoSgW1iveL-Uk9PVA">spreadsheet template gallery</a>. You can also check out the <a href="https://docs.google.com/spreadsheets/d/186YX-RyEyz5OcTsoI4QwIyJJMuZVc5MNTYIrF62ztiI/edit#gid=1732160294">sample budget sheet</a> that I’ve created to see what it looks like. It’s made up of two pages (sheets):</p>
<ul>
<li><strong>Transactions</strong> page lets you insert expense &amp; income entries.</li>
<li><strong>Summary</strong> page lets you keep track of your budget.</li>
</ul>
<p>The main purpose of this tool is to let you insert entries in Transactions page from CLI, saving you the trouble of opening the actual spreadsheet in a browser.</p>
<img src="/2018/11/10/budget-cli/demo.gif" class="">

<h4 id="Preliminaries"><a href="#Preliminaries" class="headerlink" title="Preliminaries"></a>Preliminaries</h4><p>A spreadsheet URL looks like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://docs.google.com/spreadsheets/d/<span class="tag">&lt;<span class="name">SPREADSHEET_ID</span>&gt;</span>/edit#gid=<span class="tag">&lt;<span class="name">SHEET_ID</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Take note of this URL or just the <code>SPREADSHEET_ID</code> after you’ve created a spreadsheet because you’re going to need it later. For example, the ID of my <a href="https://docs.google.com/spreadsheets/d/186YX-RyEyz5OcTsoI4QwIyJJMuZVc5MNTYIrF62ztiI/edit#gid=0">sample budget spreadsheet</a> is <code>186YX-RyEyz5OcTsoI4QwIyJJMuZVc5MNTYIrF62ztiI</code>.</p>
<p>Then you have to simply follow the first 2 steps of <a href="https://developers.google.com/sheets/api/quickstart/python">this guide</a> which involve</p>
<ol>
<li>creating a console project to enable the Google Sheets API:<img src="/2018/11/10/budget-cli/create-project.png" class="">
<br></li>
<li>downloading a <code>credentials.json</code> file for authorization:<img src="/2018/11/10/budget-cli/download-credentials.png" class="">
<br></li>
<li>installing the Google Client Library:</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade google-api-python-client oauth2client</span><br></pre></td></tr></table></figure>
<h4 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h4><p>The next step is to generate an authorization token to access your spreadsheets. The script below will open up a browser and request permission from your Google account to generate a <code>token.json</code> file from <code>credentials.json</code>:</p>
<figure class="highlight python"><figcaption><span>createtoken.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> oauth2client <span class="keyword">import</span> file, client, tools</span><br><span class="line"><span class="keyword">from</span> httplib2 <span class="keyword">import</span> Http</span><br><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"></span><br><span class="line">SCOPES = <span class="string">&#x27;https://www.googleapis.com/auth/spreadsheets&#x27;</span></span><br><span class="line"></span><br><span class="line">store = file.Storage(<span class="string">&#x27;token.json&#x27;</span>)</span><br><span class="line">creds = store.get()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> creds <span class="keyword">or</span> creds.invalid:</span><br><span class="line">    flow = client.flow_from_clientsecrets(<span class="string">&#x27;credentials.json&#x27;</span>, SCOPES)</span><br><span class="line">    tools.run_flow(flow, store)</span><br></pre></td></tr></table></figure>
<p>This token needs to be created only once, so it’s a good idea to do it as part of the installation procedure of the app. Let’s create an installation script and run <code>createtoken.py</code> as the first step:</p>
<figure class="highlight sh"><figcaption><span>install.sh</span></figcaption><table><tr><td class="code"><pre><span class="line">python3 createtoken.py</span><br></pre></td></tr></table></figure>
<p>Before inserting a transaction entry, our app needs to read <code>token.json</code> and authorize. So let’s create the main script and add this authorization step:</p>
<figure class="highlight python"><figcaption><span>budget.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"><span class="keyword">from</span> httplib2 <span class="keyword">import</span> Http</span><br><span class="line"><span class="keyword">from</span> oauth2client <span class="keyword">import</span> file, client, tools</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    store = file.Storage(<span class="string">&#x27;token.json&#x27;</span>)</span><br><span class="line">    creds = store.get()</span><br><span class="line">    service = build(<span class="string">&#x27;sheets&#x27;</span>, <span class="string">&#x27;v4&#x27;</span>, http=creds.authorize(Http()))</span><br></pre></td></tr></table></figure>
<h4 id="Commands-amp-Parameters"><a href="#Commands-amp-Parameters" class="headerlink" title="Commands &amp; Parameters"></a>Commands &amp; Parameters</h4><p>Our app will have 4 commands:</p>
<ol>
<li>Select Spreadsheet by ID</li>
<li>Select Spreadsheet by URL</li>
<li>Append Expense</li>
<li>Append Income</li>
</ol>
<p>And here’s how each command is going to be executed by the user:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># select spreadsheet by ID</span></span><br><span class="line">budget id &lt;SPREADSHEET_ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># select spreadsheet by URL</span></span><br><span class="line">budget url &lt;SPREADSHEET_URL&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># append expense</span></span><br><span class="line">budget expense <span class="string">&quot;&lt;Date&gt;,&lt;Amount&gt;,&lt;Description&gt;,&lt;Category&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># append income</span></span><br><span class="line">budget income <span class="string">&quot;&lt;Date&gt;,&lt;Amount&gt;,&lt;Description&gt;,&lt;Category&gt;&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>Date</code>, <code>Amount</code>, <code>Description</code> and <code>Category</code> parameters are the values to be inserted in Transactions page at</p>
<ul>
<li>columns <code>B</code> to <code>E</code> for expense entry, and</li>
<li>columns <code>G</code> to <code>J</code> for income entry.</li>
</ul>
<img src="/2018/11/10/budget-cli/transactions-sheet.png" class="">
<br>

<p>In order to recognize these commands and parameters, some argument parsing has to be done in <code>budget.py</code>:</p>
<figure class="highlight python"><figcaption><span>budget.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"><span class="keyword">from</span> httplib2 <span class="keyword">import</span> Http</span><br><span class="line"><span class="keyword">from</span> oauth2client <span class="keyword">import</span> file, client, tools</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    command = sys.argv[<span class="number">1</span>]</span><br><span class="line">    arg = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> command == <span class="string">&#x27;url&#x27;</span>: </span><br><span class="line">        start = arg.find(<span class="string">&quot;spreadsheets/d/&quot;</span>)</span><br><span class="line">        end = arg.find(<span class="string">&quot;/edit#&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># write spreadsheet ID &amp; exit if command is &#x27;id&#x27; or &#x27;url&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> command == <span class="string">&#x27;id&#x27;</span> <span class="keyword">or</span> command == <span class="string">&#x27;url&#x27;</span>:</span><br><span class="line">        ssheetId = arg <span class="keyword">if</span> command == <span class="string">&#x27;id&#x27;</span> <span class="keyword">else</span> arg[(start + <span class="number">15</span>):end]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;spreadsheet.id&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(ssheetId)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># parse transaction parameters (date, amount, description, category)</span></span><br><span class="line">    entry = arg.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read spreadsheet ID from file if command is &#x27;expense&#x27; or &#x27;income&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;spreadsheet.id&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        ssheetId = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># authorize</span></span><br><span class="line">    store = file.Storage(<span class="string">&#x27;token.json&#x27;</span>)</span><br><span class="line">    creds = store.get()</span><br><span class="line">    service = build(<span class="string">&#x27;sheets&#x27;</span>, <span class="string">&#x27;v4&#x27;</span>, http=creds.authorize(Http()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> insert transaction</span></span><br></pre></td></tr></table></figure>
<p>Notice that <code>SPREADSHEET_ID</code> is written to a file named <code>spreadsheet.id</code> whenever one of the <code>id</code> or <code>url</code> commands is executed. And this file is read while processing the <code>expense</code> and <code>income</code> commands in order to access the selected spreadsheet.</p>
<h4 id="Transaction-Entry"><a href="#Transaction-Entry" class="headerlink" title="Transaction Entry"></a>Transaction Entry</h4><p>First of all, row and column indices of the last entry has to be determined in order to append a new one. To do that, we read rows 5 to 40 from column <code>C</code> or <code>H</code> (depending on the command) and check the number of existing entries. Here 5 is the minimum row index that a transaction can be inserted, and 40 is the index of the last row in the Transactions page. (You should set this to the total number of rows in your sheet.) Then we store the row index to insert a new entry for the current transaction type in a variable called <code>rowIdx</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rangeName = <span class="string">&#x27;Transactions!C5:C40&#x27;</span> <span class="keyword">if</span> command == <span class="string">&#x27;expense&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;Transactions!H5:H40&#x27;</span></span><br><span class="line">result = service.spreadsheets().values().get(spreadsheetId=ssheetId, <span class="built_in">range</span>=rangeName).execute()</span><br><span class="line">values = result.get(<span class="string">&#x27;values&#x27;</span>, [])</span><br><span class="line">rowIdx = <span class="number">5</span> <span class="keyword">if</span> <span class="keyword">not</span> values <span class="keyword">else</span> <span class="number">5</span> + <span class="built_in">len</span>(values)</span><br></pre></td></tr></table></figure>
<img src="/2018/11/10/budget-cli/min-max-rows.png" class="">
<br>

<p>Finally we update the corresponding cells with date, amount, description &amp; category parameters stored in the <code>entry</code> variable:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">startCol = <span class="string">&quot;B&quot;</span> <span class="keyword">if</span> command == <span class="string">&#x27;expense&#x27;</span> <span class="keyword">else</span> <span class="string">&quot;G&quot;</span></span><br><span class="line">endCol = <span class="string">&quot;E&quot;</span> <span class="keyword">if</span> command == <span class="string">&#x27;expense&#x27;</span> <span class="keyword">else</span> <span class="string">&quot;J&quot;</span></span><br><span class="line">rangeName = <span class="string">&quot;Transactions!&quot;</span> + startCol + <span class="built_in">str</span>(rowIdx) + <span class="string">&quot;:&quot;</span> + endCol + <span class="built_in">str</span>(rowIdx)</span><br><span class="line">body = &#123;<span class="string">&#x27;values&#x27;</span>: [entry]&#125;</span><br><span class="line">result = service.spreadsheets().values().update(spreadsheetId=ssheetId, <span class="built_in">range</span>=rangeName,</span><br><span class="line">                                                valueInputOption=<span class="string">&quot;USER_ENTERED&quot;</span>, body=body).execute()</span><br></pre></td></tr></table></figure>
<h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><p>Now we have <code>budget.py</code> ready in our project folder. However, it has to be executable from any directory via CLI. Therefore we need to make sure that it’s in a directory referenced by the <code>PATH</code> environment variable, such as <code>/usr/bin/</code>.</p>
<p>On the other hand, <code>token.json</code> and <code>spreadsheet.id</code> files do not have to be in <code>PATH</code>. They should be located somewhere owned by the user such as <code>~/.config/budget-cli/</code> so that they can be accessed without <code>sudo</code> permission.</p>
<p>We’re going to copy <code>budget.py</code> and <code>token.json</code> in <code>install.sh</code>, and <code>spreadsheet.id</code> will be created inside <code>~/.config/budget-cli/</code> automatically when the <code>budget id</code> or <code>budget url</code> command is executed for the first time:</p>
<figure class="highlight python"><figcaption><span>install.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># create token from credentials</span></span><br><span class="line">python3 createtoken.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># move script to a location in PATH and make it executable</span></span><br><span class="line">sudo cp budget.py /usr/<span class="built_in">bin</span>/budget</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">bin</span>/budget</span><br><span class="line"></span><br><span class="line"><span class="comment"># move token.json to a globally accessible location with read access</span></span><br><span class="line">mkdir -p ~/.config/budget-cli</span><br><span class="line">cp token.json ~/.config/budget-cli/token.json</span><br><span class="line">chmod +r ~/.config/budget-cli/token.json</span><br></pre></td></tr></table></figure>
<p>Notice that I’m renaming <code>budget.py</code> as <code>budget</code> while copying it because I want to use the app like</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">budget &lt;command&gt; &lt;params&gt;</span><br></pre></td></tr></table></figure>
<p>as opposed to </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">budget.py &lt;command&gt; &lt;params&gt;</span><br></pre></td></tr></table></figure>
<p>Note that this wouldn’t be possible without the first line in <code>budget.py</code>, which is:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br></pre></td></tr></table></figure>
<p>By the way, let’s not forget to create an uninstallation script to clean up:</p>
<figure class="highlight txt"><figcaption><span>uninstall.sh</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo rm -f /usr/bin/budget</span><br><span class="line">rm -rf ~/.config/budget-cli</span><br></pre></td></tr></table></figure>
<p>Last but not least, we have to slightly modify the file I/O lines in <code>budget.py</code> taking into account the global file locations. You can find the polished and up-to-date version of it in the <a href="https://github.com/utkuufuk/budget-cli">Github repository</a>. The latest version also has new cool features like logging the transaction history:</p>
<img src="/2018/11/10/budget-cli/log.gif" class="">
<br>

<p>That’s it! Just run <code>./install.sh</code> from the project folder and you should be able to use the app. I hope you enjoyed this little walkthrough. If you’re still here, you should <a href="%5Csubscribe">subscribe</a> to get updates on my future articles.</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>CLI</tag>
        <tag>Google Sheets</tag>
        <tag>Budget Tracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Try, catch, but don&#39;t throw</title>
    <url>/2024/09/20/error-handling-in-typescript/</url>
    <content><![CDATA[<p>The standard <code>try-catch-throw</code> approach to error handling in TypeScript is not type-safe, making it difficult to explicitly handle different kinds of errors in business logic. This might be okay in small projects where it’s affordable to treat all errors similarly, but it’s not ideal for larger and more complex projects where it’s oftentimes desirable to differentiate between recoverable and unrecoverable errors.</p>
<h2 id="Limitations-of-standard-error-handling"><a href="#Limitations-of-standard-error-handling" class="headerlink" title="Limitations of standard error handling"></a>Limitations of standard error handling</h2><p>Since the caught error is of type <code>unknown</code> in the <code>catch</code> block, we cannot rely on TypeScript in ensuring that all the possible error types are covered. Suppose that we have a function that can fail due to several reasons such as:</p>
<ul>
<li>Input decode (format) failure </li>
<li>Input validation failure </li>
<li>Unexpected database query result</li>
<li>HTTP request timeout</li>
<li>Other errors thrown by libraries</li>
</ul>
<p>Some of these errors might be recoverable. Such errors should not bubble up to higher abstraction layers lest they disrupt the entire operation. Instead, they should be gracefully handled by the business logic.</p>
<p>For the sake of the argument, let’s assume that we want our system to recover from <code>DecodeError</code> and <code>ValidationError</code> in the example below:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecodeError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidationError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// may throw DecodeError or ValidationError</span></span><br><span class="line"><span class="comment">// (but that&#x27;s not visible in the signature)</span></span><br><span class="line"><span class="keyword">const</span> importData = (rawData: unknown): <span class="function"><span class="params">ImportResult</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call site</span></span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">  importData(rawData)</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123; <span class="comment">// err is of type `unknown`  </span></span><br><span class="line">  <span class="keyword">if</span> (err <span class="keyword">instanceof</span> DecodeError) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">&#x27;Decode error:&#x27;</span>, err)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gracefully handle decode error</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// oops, forgot to handle ValidationError</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we wish to handle certain types of errors explicitly, we must make sure to cover all of them, and we get no help whatsoever from TypeScript. Moreover, if the above function evolves to produce additional types of (recoverable) errors, there’s a risk of forgetting to cover them in all the corresponding <code>catch</code> blocks.</p>
<p>Before we start talking about a better approach, it’s important to note that<br>we cannot completely avoid dealing with thrown <code>Error</code>s. This is because external (third-party and system) function calls <strong>will</strong> throw <code>Error</code>s, even if our code doesn’t throw at all. Thus, we need to find a solution that can deal with unavoidable (foreign) <code>Error</code>s too.</p>
<h2 id="A-simple-type-safe-alternative"><a href="#A-simple-type-safe-alternative" class="headerlink" title="A simple type-safe alternative"></a>A simple type-safe alternative</h2><p>Here’s all the boilerplate needed for this simple yet type-safe error-handling mechanism:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Failure</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> <span class="title">name</span>(): <span class="title">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.constructor.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isFailure =</span><br><span class="line">  &lt;F <span class="keyword">extends</span> Failure, T&gt;<span class="function">(<span class="params">f: <span class="keyword">new</span> (...args: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;) =&gt; F</span>) =&gt;</span></span><br><span class="line">  (m: T | F): m is F =&gt;</span><br><span class="line">    m <span class="keyword">instanceof</span> f</span><br></pre></td></tr></table></figure>
<p>After that, we only need to extend the <code>Failure</code> class for specific types of errors we wish to handle explicitly:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationFailure</span>&lt;<span class="title">T</span> </span>= unknown&gt; <span class="keyword">extends</span> Failure &#123;</span><br><span class="line">  rawObject: T</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">rawObject: T</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.rawObject = rawObject</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DecodeFailure</span> <span class="keyword">extends</span> <span class="title">Failure</span> </span>&#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With this minimal toolkit, we can use <code>importData</code> from the earlier example as follows:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> importData = (rawData: unknown): ImportResult | DecodeFailure | <span class="function"><span class="params">ValidationFailure</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> persistData = <span class="function">(<span class="params">importRes: ImportResult</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call site</span></span><br><span class="line"><span class="keyword">const</span> res = importData(rawData)</span><br><span class="line"><span class="keyword">if</span> (isFailure(DecodeFailure)(res)) &#123;</span><br><span class="line">  <span class="comment">// handle decode failure</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFailure(ValidationFailure)(res)) &#123;</span><br><span class="line">  <span class="comment">// handle validation failure</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">persistData(res) <span class="comment">// res must be of type `ImportResult`</span></span><br></pre></td></tr></table></figure>
<p>Note that all the possible failure types are visible in the function signature. TypeScript will alert us if we fail to cover all the possible failure cases at the call site; we won’t be allowed to pass a variable of type <code>ImportResult | SomeFailure</code> to <code>persistData</code>, which expects an <code>ImportResult</code>.</p>
<h2 id="Dealing-with-foreign-errors"><a href="#Dealing-with-foreign-errors" class="headerlink" title="Dealing with foreign errors"></a>Dealing with foreign errors</h2><p>As mentioned earlier, we cannot prevent our dependencies from throwing errors. Therefore, we still need to rely on <code>try / catch</code> blocks to handle those errors. Now comes the crucial principle:</p>
<blockquote>
<p>Try, catch, but do not throw.</p>
</blockquote>
<p>This means that <strong>in our own code</strong> we should never <code>throw</code> an <code>Error</code> of our own by extending the <code>Error</code> class. Instead, we should extend <code>Failure</code> and return it.</p>
<p>In <code>try / catch</code> blocks at higher layers of abstraction, we may log errors, return HTTP responses, and so on. At lower layers (i.e. business logic), we may catch a foreign <code>Error</code> and return it as a <code>Failure</code>.</p>
<p>An <code>Error</code> should be converted to a <code>Failure</code> <strong>if and only if</strong> it needs to be explicitly handled it in the business logic. Assuming that most errors don’t require special treatment, <code>Failure</code>s are supposed to be used for a very small subset of errors. In such cases, the conversion should be done at the earliest opportunity lest the <code>Error</code> bubbles up to higher layers.</p>
<p>Here’s an example where a <code>SyntaxError</code> thrown by <code>JSON.parse</code> is converted to a <code>ParseFailure</code> and returned:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParseFailure</span> <span class="keyword">extends</span> <span class="title">Failure</span> </span>&#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> safeParseJson = (serializedData: <span class="built_in">string</span>): <span class="built_in">object</span> | <span class="function"><span class="params">ParseFailure</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(serializedData)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err <span class="keyword">instanceof</span> <span class="built_in">SyntaxError</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ParseFailure(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> err <span class="comment">// let all other kinds of errors bubble up</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Since we wish to explicitly handle <code>SyntaxError</code>, we need to prevent it from bubbling up unchecked. By converting it to <code>ParseFailure</code>, we force ourselves to explicitly handle it in our business logic.</p>
<p>Note that in the above example, the way we capture <code>SyntaxError</code> is not type-safe. That’s because catching and matching it (via <code>instanceof</code>) is the only option. On the bright side, anything that uses <code>safeParseJson</code> has a way handle <code>ParseFailure</code> in a type-safe manner.</p>
<h2 id="Failure-not-based-on-an-Error"><a href="#Failure-not-based-on-an-Error" class="headerlink" title="Failure not based on an Error"></a><code>Failure</code> not based on an <code>Error</code></h2><p>A <code>Failure</code> doesn’t necessarily have to be created based on an <code>Error</code>. We can create and return custom <code>Failure</code>s in the business logic to represent an event/state/situation that isn’t a part of the happy path. For instance, if the business logic doesn’t allow a certain state, then we could return an <code>IllegalStateFailure</code> rather than throw an <code>IllegalStateError</code> and pray that it is handled properly (if at all) in all relevant <code>catch</code> blocks.</p>
<h2 id="Code-style"><a href="#Code-style" class="headerlink" title="Code style"></a>Code style</h2><p>On top of the lack of type safety, this standard error-handling approach makes the code messier too. To throw different kinds of errors from a function, we have to declare some variables via <code>let</code> instead of <code>const</code> (yikes!), and have a lot of <code>try / catch</code> blocks that clutter the code.</p>
<p>To demonstrate this, compare the following two implementations of <code>importData</code> from the earlier examples:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Standard error handling</span></span><br><span class="line"><span class="keyword">const</span> importData = (rawData: unknown): <span class="function"><span class="params">ImportResult</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> decodedData</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    decodedData = decode(rawData)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> DecodeError()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> validatedData</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    validatedData = validate(decodedData)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ValidationError()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Type-safe error handling</span></span><br><span class="line"><span class="keyword">const</span> importData = (rawData: unknown): ImportResult | DecodeFailure | <span class="function"><span class="params">ValidationFailure</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> decodedData = decode(rawData)</span><br><span class="line">  <span class="keyword">if</span> (isFailure(DecodeFailure)(decodedData)) &#123;</span><br><span class="line">    <span class="keyword">return</span> decodedData <span class="comment">// return the failure (DecodeFailure) as-is</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> validatedData = validate(decodedData)</span><br><span class="line">  <span class="keyword">if</span> (isFailure(ValidationFailure)(validatedData)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OtherFailure(validatedData) <span class="comment">// return a new failure            </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Other-alternatives"><a href="#Other-alternatives" class="headerlink" title="Other alternatives"></a>Other alternatives</h2><p>There are some existing type-safe alternatives to the standard error-handling approach such as <a href="https://gcanti.github.io/fp-ts/modules/Either.ts.html"><code>Either</code> (from <code>fp-ts</code>)</a> and <a href="https://github.com/supermacro/neverthrow">neverthrow</a>.</p>
<p>However, I prefer this solution because</p>
<ul>
<li>It’s much less intrusive than the aforementioned alternatives. For instance, using <code>Either</code> will likely expose you to more functional programming than you might be comfortable with.</li>
<li>You won’t have to unwrap the return value in the happy path. With <code>Either</code>  and <code>neverthrow</code>, the return value is wrapped with <code>Right</code> and <code>Ok</code>, respectively.</li>
<li>Only 10 lines of boilerplate code, no external library dependencies.</li>
</ul>
<h2 id="Key-takeaways"><a href="#Key-takeaways" class="headerlink" title="Key takeaways"></a>Key takeaways</h2><ul>
<li>TypeScript has a severe blind spot in type safety when it comes to standard error handling.</li>
<li>Outside of <code>catch</code> blocks, create custom <code>Failure</code>s and return them instead of throwing custom <code>Error</code>s.</li>
<li>Catch and convert an <code>Error</code> to a <code>Failure</code> if it should be explicitly handled. If not (that is most of the time), let it bubble up.</li>
<li>By declaring all the possible <code>Failure</code> types in the signature, you can know much more   about the behavior of a function at first glance.</li>
</ul>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Error Handling</tag>
      </tags>
  </entry>
  <entry>
    <title>A Beginner&#39;s Roadmap to Becoming a Full-Stack Web Developer</title>
    <url>/2019/05/12/fullstack-roadmap/</url>
    <content><![CDATA[<p>I’ve been learning about web development for a while pretty much from scratch. I’ve gone over numerous guides, tutorials and documentation from various resources, among which I took note of the important and beneficial ones that I believe a beginner will benefit from the most. In this article, I’m going to share them with you as a roadmap that you can follow if you want to become a full-stack web developer in a fun and efficient way.</p>
<a id="more"></a>

<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Let’s make one thing clear. There are <em>lots</em> of programming languages, tools and frameworks out there in the world of web development. In most cases, there’s not a single best way to solve a problem. However, as a beginner, you shouldn’t attempt to learn every new thing for the sole sake of learning, or just because some people are hyped about it. On the contrary, you should aim to acquire the bare minimum skill set so that you can start building stuff as soon as possible.</p>
<p>For instance, you’re going to have to learn JavaScript in order to write browser (front-end) code no matter what. And guess what, there’s something called <a href="https://nodejs.org/en/">Node.js</a> which lets you write server-side code using JavaScript as well. Now I’m not arguing here whether Node.js is the best option for developing your back-end or not. However, it’s certainly convenient to be able to build an entire web application by having to learn just one programming language. A deal too good to pass up, don’t you think?</p>
<p>You can (and should) always learn about other technology trends once you master the basics and have a solid understanding of how the web works.</p>
<h3 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h3><p>I’m going to divide the steps in this roadmap into several chapters which are sorted below from basic to advanced:</p>
<ol>
<li><a href="#Chapter-1-HTML-amp-CSS">HTML &amp; CSS</a></li>
<li><a href="#Chapter-2-JavaScript">JavaScript</a></li>
<li><a href="#Chapter-3-Node-js">Node.js</a></li>
<li><a href="#Chapter-4-MySQL">MySQL</a></li>
<li><a href="#Chapter-5-React">React</a></li>
<li><a href="#Chapter-6-Docker">Docker</a></li>
</ol>
<p>I’m also going to label each item in a category as <em>fundamental</em>, <em>optional</em> or <em>reference</em>. I strongly advise against advancing to a category before completing all the <em>fundamental</em> steps in a previous category. You can postpone <em>optional</em> steps if you want, or skip them altogether if you’re feeling too lazy. <em>References</em> are not meant to be gone through from start to end. You’ll find them useful in the future when you forget some detail and want to quickly look it up, or when you need further information about a specific topic in the corresponding category.</p>
<p>By the way, I didn’t mention this above but if you don’t know how to use <a href="https://git-scm.com/">Git</a>, stop whatever you’re doing and learn it ASAP. Don’t worry, it’s not going to take long. Actually <a href="https://www.youtube.com/watch?v=SWYqp7iY_Tc">this 30 min YouTube video</a> is more than enough to get you started. Just make sure that you know how to use the following 7 simple commands for starters:</p>
<ul>
<li><a href="https://git-scm.com/docs/git-init"><code>git init</code></a></li>
<li><a href="https://git-scm.com/docs/git-status"><code>git status</code></a></li>
<li><a href="https://git-scm.com/docs/git-add"><code>git add</code></a></li>
<li><a href="https://git-scm.com/docs/git-commit"><code>git commit</code></a></li>
<li><a href="https://git-scm.com/docs/git-clone"><code>git clone</code></a></li>
<li><a href="https://git-scm.com/docs/git-pull"><code>git pull</code></a></li>
<li><a href="https://git-scm.com/docs/git-push"><code>git push</code></a></li>
</ul>
<p>Lastly I just want to say that if you haven’t used <a href="https://code.visualstudio.com/">Visual Studio Code</a> yet, you should definitely give it a try. I think it’s an amazing code editor, especially for JavaScript.</p>
<p>Alright let’s begin…</p>
<h4 id="Chapter-1-HTML-amp-CSS"><a href="#Chapter-1-HTML-amp-CSS" class="headerlink" title="Chapter 1 - HTML &amp; CSS"></a>Chapter 1 - HTML &amp; CSS</h4><img src="/2019/05/12/fullstack-roadmap/html-css.png" class="">
<p>Learning HTML &amp; CSS is definitely where you want to start as a beginner. Once you have a solid knowledge, these two will let you build structured, elegant and responsive websites with static content such as a blog or a portfolio page. You’ll also use this knowledge in the following chapters where you’ll deal with browser-side JavaScript code or a front-end framework such as React.</p>
<h5 id="Fundamentals"><a href="#Fundamentals" class="headerlink" title="Fundamentals"></a>Fundamentals</h5><ol>
<li><strong><a href="https://www.youtube.com/watch?v=UB1O30fR-EE">HTML Crash Course</a>:</strong> HTML for absolute beginners.</li>
<li><strong><a href="https://www.youtube.com/watch?v=yfoY53QXEnI">CSS Crash Course</a>:</strong> CSS for absolute beginners.</li>
<li><strong><a href="https://www.youtube.com/watch?v=fgOO9YUFlGI&list=PLoYCgNOIyGABDU532eesybur5HPBVfC1G&index=9">Responsive Design Tutorial</a>:</strong> Responsiveness isn’t just a nice feature anymore in modern web design, it’s the default.</li>
<li><strong><a href="https://scrimba.com/g/gR8PTE">CSS Grid Tutorial</a>:</strong> CSS Grid lets you easily arrange HTML elements in two dimensions on a web page. </li>
</ol>
<h5 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h5><ol>
<li><strong><a href="https://www.youtube.com/playlist?list=PLC3y8-rFHvwg6rjbiMadCILrjh7QkvzoQ">CSS Flexbox Tutorial</a>:</strong> This is a useful yet optional item because it doesn’t really provide any extra functionality if you already know CSS Grid.</li>
<li><strong><a href="https://sass-lang.com/guide">SASS Basics</a>:</strong> SASS makes it simple to deal with CSS in complex websites. You’ll most likely find it useful in the future, but it’s not mandatory at this point.</li>
<li><strong><a href="https://www.youtube.com/watch?v=IFM9hbapeA0&list=PLillGF-Rfqba3xeEvDzIcUCxwMlGiewfV">Social Network Theme With SASS</a>:</strong> This video clearly explains how to design a realistic website from scratch using SASS.</li>
</ol>
<h5 id="References"><a href="#References" class="headerlink" title="References"></a>References</h5><ol>
<li><strong><a href="https://www.w3schools.com/html/default.asp">HTML</a></strong> and <strong><a href="https://www.w3schools.com/css/default.asp">CSS</a>:</strong> Don’t try to memorize everything. You can always look it up.</li>
<li><strong><a href="https://www.netlify.com/docs/">Netlify</a></strong> and <strong><a href="https://devcenter.heroku.com/">Heroku</a>:</strong> Come back here when you want to deploy your app.</li>
</ol>
<p>At this point, I have to also mention some CSS frameworks such as <a href="https://getbootstrap.com/docs/4.3/getting-started/introduction/">Bootstrap</a> and <a href="https://materializecss.com/">Materialize</a>. Most people will advise you to learn one because these can really speed up your development process. IMHO this approach isn’t going to help you fully grasp the basics of web design. I think you should stay away from them until you’re comfortable with styling websites with your bare hands.</p>
<h4 id="Chapter-2-JavaScript"><a href="#Chapter-2-JavaScript" class="headerlink" title="Chapter 2 - JavaScript"></a>Chapter 2 - JavaScript</h4><img src="/2019/05/12/fullstack-roadmap/javascript.jpg" class="">
<span style="height:0.1rem">
Being the only programming language that can possibly be used on the front-end side, JavaScript is an essential part of web development. As I mentioned earlier, you're going to be able to develop back-end code with it too, once you learn Node.js as well.

<h5 id="Fundamentals-1"><a href="#Fundamentals-1" class="headerlink" title="Fundamentals"></a>Fundamentals</h5><ol>
<li><strong><a href="http://javascript.info/">The Modern JavaScript Tutorial</a>:</strong> This is by far the most important item in this list, maybe even in this whole roadmap. It’s going to take some time, but you should absolutely complete at least the first two parts. Since JavaScript is going to be your primary tool as a web developer, you won’t regret investing your time on learning it properly. The good news is, learning JavaScript is fun and you can build cool stuff with it as you learn.</li>
<li><strong><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway?</a>:</strong> Knowing how JavaScript works behind the scenes will give you a deeper understanding of the code you write.</li>
<li><strong><a href="https://www.youtube.com/watch?v=568g8hxJJp4">async &amp; await in JavaScript</a>:</strong> Promises and <code>async/await</code> might get confusing if you’re not familiar with asynchronous programming. Check this video out after reading the corresponding section in <a href="http://javascript.info/">The Modern JavaScript Tutorial</a> in order to see some real action.</li>
</ol>
<h5 id="Optionals-1"><a href="#Optionals-1" class="headerlink" title="Optionals"></a>Optionals</h5><ol>
<li><strong><a href="https://watchandcode.com/courses/60264/lectures/896960">Practical JavaScript</a>:</strong> I’m listing this one here because <a href="http://javascript.info/">The Modern JavaScript Tutorial</a> covers everything in it and then some. You can consider it as an optional preliminary step for this chapter.</li>
<li><strong><a href="https://www.youtube.com/playlist?list=PLoYCgNOIyGABs-wDaaxChu82q_xQgUb4f">Modular Javascript</a>:</strong> This one is a bit outdated in terms of JavaScript language features, but it’s still a good tutorial for learning basic design patterns.</li>
<li><strong><a href="https://www.youtube.com/watch?v=r6I-Ahc0HB4&list=PL4cUxeGkcC9g6m_6Sld9Q4jzqdqHd2HiD">RegEx Tutorial 1</a></strong> and/or <strong><a href="https://www.youtube.com/watch?v=sa-TUpSx1JA">RegEx Tutorial 2</a>:</strong> While not strictly a JavaScript thing, knowing a little bit of RegEx can make a big difference in your efficiency as a developer.</li>
</ol>
<p>On a side note, it’s not necessary to learn <a href="https://jquery.com/">jQuery</a> unless you have to read and/or modify existing code that uses it. Vanilla JavaScript is equally powerful today except for a few use cases.</p>
<h5 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h5><ol>
<li><strong><a href="http://javascript.info/">The Modern JavaScript Tutorial</a>:</strong> Let’s face it, you won’t remember everything in this tutorial after reading it once.</li>
<li><strong><a href="https://developers.google.com/web/tools/chrome-devtools/">Chrome DevTools</a>:</strong> This is an excellent reference if you use Chrome developer tools. Besides JavaScript, you can find lots of useful information in it regarding HTML &amp; CSS too.</li>
</ol>
<h4 id="Chapter-3-Node-js"><a href="#Chapter-3-Node-js" class="headerlink" title="Chapter 3 - Node.js"></a>Chapter 3 - Node.js</h4><img src="/2019/05/12/fullstack-roadmap/nodejs.jpg" class="">
<p>Node.js is an asynchronous event-driven JavaScript runtime built on Chrome’s V8 JavaScript engine, which is designed to build scalable web applications. You’ll have acquired the minimum skill set to build an entire dynamic web application after completing this chapter.</p>
<h5 id="Fundamentals-2"><a href="#Fundamentals-2" class="headerlink" title="Fundamentals"></a>Fundamentals</h5><ol>
<li><strong><a href="https://www.sitepoint.com/beginners-guide-node-package-manager/">A Beginner’s Guide to NPM</a>:</strong> This is a quick guide on how to install and get started with Node.js and the Node Package Manager (NPM).</li>
<li><strong><a href="https://www.youtube.com/watch?v=fBNz5xF-Kx4">Node.js Crash Course</a>:</strong> A good introductory video to learn Node.js basics.</li>
<li><strong><a href="https://www.youtube.com/watch?v=L72fhGm1tfE">Express Crash Course</a>:</strong> In this video, you’re going to learn about a very popular Node.js framework called Express, which is widely used for developing web applications. </li>
<li><strong><a href="https://www.youtube.com/playlist?list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q">Building a RESTful API with Node.js</a>:</strong> An amazing YouTube playlist which walks you through the process of building a practical REST API using Node.js and Express. You’ll also learn how to interact with a NoSQL database called MongoDB along the way.</li>
</ol>
<h5 id="Optionals-2"><a href="#Optionals-2" class="headerlink" title="Optionals"></a>Optionals</h5><ol>
<li><strong><a href="https://www.youtube.com/watch?v=ztspvPYybIY">Node.js Presentation</a>:</strong> A presentation of Node.js by its original developer Ryan Dahl. Check it out if you want to learn what kinds of problems Node.js has been designed to solve and how it handles I/O compared to some other back-end frameworks.</li>
</ol>
<h5 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h5><ol>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP Reference</a>:</strong> Lots of useful information including HTTP request methods, response codes, headers and so on.</li>
</ol>
<h4 id="Chapter-4-MySQL"><a href="#Chapter-4-MySQL" class="headerlink" title="Chapter 4 - MySQL"></a>Chapter 4 - MySQL</h4><img src="/2019/05/12/fullstack-roadmap/mysql.png" class="">
<p>You should’ve learned a little bit about MongoDB in the last chapter if you completed all the fundamentals. Now it’s time to learn some SQL. I think MySQL is a good place to start learning about relational databases.</p>
<p>One thing I would recommend you is, don’t just go with the flow and automatically opt for NoSQL just because everyone is using MongoDB with Node.js these days. This decision requires rational thinking and comparing the pros and cons of each option. There’s a good chance that a relational database is going to fit your needs better for your first real application as a beginner.</p>
<h5 id="Fundamentals-3"><a href="#Fundamentals-3" class="headerlink" title="Fundamentals"></a>Fundamentals</h5><ol>
<li><strong><a href="https://www.youtube.com/watch?v=9ylj9NR0Lcg">MySQL Crash Course</a>:</strong> A very good intro to SQL.</li>
<li><strong><a href="https://youtu.be/EN6Dx22cPRI">Using MySQL with Node.js</a>:</strong> Learn how to make use of SQL queries as part of a REST API built with Node.</li>
</ol>
<h5 id="References-3"><a href="#References-3" class="headerlink" title="References"></a>References</h5><ol>
<li><strong><a href="https://www.w3schools.com/sql/sql_quickref.asp">SQL Quick Reference</a></strong> and <strong><a href="https://www.w3schools.com/sql/sql_ref_keywords.asp">SQL Keywords Reference</a>:</strong> Because ain’t nobody got time for memorizing all that.</li>
</ol>
<p>Lastly, Object Relational Mapping (ORM), e.g. <a href="http://docs.sequelizejs.com/">Sequelize</a> can be tempting to use at first but I say stay away from them before fully grasping SQL. Have a look at <a href="https://blog.logrocket.com/why-you-should-avoid-orms-with-examples-in-node-js-e0baab73fa5">this</a> if you want to know why.</p>
<h4 id="Chapter-5-React"><a href="#Chapter-5-React" class="headerlink" title="Chapter 5 - React"></a>Chapter 5 - React</h4><img src="/2019/05/12/fullstack-roadmap/react.png" class="">
<span style="height:0.1rem">
So far you've been building your front-end using plain JavaScript. And that's perfectly fine if you want to become a back-end developer. In that case, please proceed to the next chapter in an orderly fashion.

<p>If you’re still here, we’ve got a little bit of additional work to do. Almost all front-end or full-stack development job openings these days require some knowledge about a front-end framework, particularly either <a href="https://reactjs.org/">React</a>, <a href="https://angular.io/">Angular</a> or <a href="https://vuejs.org/">Vue</a>.</p>
<p>At the end of the day, choosing between them really boils down to personal preference unless you want to apply to a specific job. I opted for React after some research, and therefore that’s what I recommend you to learn as well. You might also want to check out some <a href="https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190">statistics</a> if you’re feeling skeptical about it.</p>
<h5 id="Fundamentals-4"><a href="#Fundamentals-4" class="headerlink" title="Fundamentals"></a>Fundamentals</h5><ol>
<li><strong><a href="https://reactjs.org/tutorial/tutorial.html">Intro to React</a>:</strong> Learn React by building your own tic-tac-toe game!</li>
<li><strong><a href="https://facebook.github.io/create-react-app/docs/getting-started">Create React App</a>:</strong> Learn how to quickly initialize a React project in a Node.js environment.</li>
<li><strong><a href="https://www.youtube.com/watch?v=sBws8MSXN7A">React Crash Course</a>:</strong> Come on now, finish off all the React on your plate.</li>
</ol>
<h5 id="Optionals-3"><a href="#Optionals-3" class="headerlink" title="Optionals"></a>Optionals</h5><ol>
<li><strong><a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG">React &amp; Redux Tutorial</a>:</strong> This is optional because it might feel a bit repetitive after completing the fundamentals. You still might want to watch this series if you want to learn about <a href="https://redux.js.org/">Redux</a>.</li>
<li><strong><a href="https://www.youtube.com/watch?v=-MlNBTSg_Ww">React Hooks</a>:</strong> React Hooks is a relatively new and cool feature, although I don’t think it’s something you absolutely have to learn at this point.</li>
<li><strong><a href="https://facebook.github.io/create-react-app/docs/adding-a-sass-stylesheet">Adding SASS to React</a>:</strong> This will only make sense if you haven’t skipped SASS in the first chapter.</li>
</ol>
<h4 id="Chapter-6-Docker"><a href="#Chapter-6-Docker" class="headerlink" title="Chapter 6 - Docker"></a>Chapter 6 - Docker</h4><img src="/2019/05/12/fullstack-roadmap/docker.jpg" class="">
<span style="height:0.1rem">
Congratulations! You're now officially a full-stack developer. Go ahead and pat yourself on the back. You must feel like how Neo felt just after he learned Kung Fu. But you still have to complete this chapter if you don't want to get your ass kicked by Morpheus.
<img src="/2019/05/12/fullstack-roadmap/morpheus.gif" class="">

<p>To some of you, Docker might not appear as an absolutely necessary thing to learn. While that’s <em>not incorrect,</em> it’s an investment you’re not going to regret. </p>
<h5 id="Fundamentals-5"><a href="#Fundamentals-5" class="headerlink" title="Fundamentals"></a>Fundamentals</h5><ol>
<li><strong><a href="https://docs.docker.com/engine/docker-overview/">Docker Overview</a>:</strong> Just so you know what you’re getting yourself into.</li>
<li><strong><a href="https://docs.docker.com/get-started/">Get Started Part 1</a></strong> and <strong><a href="https://docs.docker.com/get-started/part2/">Part 2</a>:</strong> Learn how to set up your Docker environment, build an image and run it as a container.</li>
<li><strong><a href="https://takacsmark.com/dockerfile-tutorial-by-example-dockerfile-best-practices-2018/">Dockerfile Tutorial by Example</a>:</strong> Learn why and how to create a Dockerfile.</li>
<li><strong><a href="https://docs.docker.com/compose/gettingstarted/">Getting Started with Docker Compose</a>:</strong> Because single-container apps are for losers.</li>
<li><strong><a href="https://takacsmark.com/docker-compose-tutorial-beginners-by-example-basics/">Docker Compose Tutorial</a>:</strong> Keep calm and Docker Compose.</li>
</ol>
<h5 id="Optionals-4"><a href="#Optionals-4" class="headerlink" title="Optionals"></a>Optionals</h5><ol>
<li><strong><a href="https://docs.docker.com/storage/">Data Management in Docker</a>:</strong> Learn how to persist data in host machine even after the container stops.</li>
<li><strong><a href="https://docs.docker.com/compose/environment-variables/">Environment Variables in Docker Compose</a>:</strong> Learn how to deal with environment variables in Docker Compose.</li>
<li><strong><a href="https://docs.docker.com/compose/networking/">Networking in Docker Compose</a>:</strong> Learn how to specify custom networks for your services.</li>
</ol>
<h5 id="References-4"><a href="#References-4" class="headerlink" title="References"></a>References</h5><ol>
<li><strong><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile Reference</a>:</strong> In case you forget how to create a Dockerfile.</li>
<li><strong><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Dockerfile Best Practices</a>:</strong> In case you forget how you <em>should</em> create a Dockerfile.</li>
<li><strong><a href="https://docs.docker.com/compose/compose-file/">Docker Compose File Reference (v3)</a>:</strong> In case you forget how to create a Docker Compose file.</li>
<li><strong><a href="https://docs.docker.com/compose/reference/">Docker Compose Command Line Reference</a>:</strong> Usage information for the <code>docker-compose</code> subcommands.</li>
</ol>
<p>That’s it, I hope you enjoyed following this roadmap. Don’t forget to <a href="/subscribe">subscribe</a> if you want to get updates on my future articles.</p>
]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>NodeJS</tag>
        <tag>MySQL</tag>
        <tag>React</tag>
        <tag>Docker</tag>
        <tag>Web Development</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning Curves in Linear &amp; Polynomial Regression</title>
    <url>/2018/05/04/learning-curves/</url>
    <content><![CDATA[<p>Learning curves are very useful for analyzing the bias-variance characteristics of a machine learning model. In this post, I’m going to talk about how to make use of them in a case study of a regression problem. We’re going to start with a simple linear regression model and improve it as much as we can by taking advantage of learning curves.</p>
<a id="more"></a>

<h4 id="Introduction-to-Learning-Curves"><a href="#Introduction-to-Learning-Curves" class="headerlink" title="Introduction to Learning Curves"></a>Introduction to Learning Curves</h4><p>In a nutshell, learning curves show how the training and validation errors change with respect to the number of training examples used while training a machine learning model.</p>
<ul>
<li><p>If a model is balanced, both errors converge to small values as the training sample size increases.</p>
</li>
<li><p>If a model has <strong>high bias</strong>, it ends up <strong>underfitting</strong> the data. As a result, both errors fail to decrease no matter how many examples there are in the training set.</p>
</li>
<li><p>If a model has <strong>high variance</strong>, it ends up  <strong>overfitting</strong> the training data. In that case, increasing the training sample size decreases the training error but it fails to decrease the validation error.</p>
</li>
</ul>
<p>The figure below demonstrates each of those cases:</p>
<img src="/2018/05/04/learning-curves/bias-variance.png" class="">

<h4 id="Problem-Definition-and-Dataset"><a href="#Problem-Definition-and-Dataset" class="headerlink" title="Problem Definition and Dataset"></a>Problem Definition and Dataset</h4><p>After this incredibly brief introduction, let me introduce you to today’s problem where we’ll get to see learning curves in action. It’s another problem from <a href="http://www.andrewng.org/">Andrew Ng’s</a> <a href="https://www.coursera.org/learn/machine-learning">machine learning course</a>, in which the objective is to predict the amount of water flowing out of a dam, given the change of water level in a reservoir. </p>
<p>The <a href="/2018/05/04/learning-curves/water.mat" title="dataset file">dataset file</a> we’re about to read contains historical records on the change in water level and the amount of water flowing out of the dam. The reason that it’s a <strong><code>.mat</code></strong> file is because this problem is originally a MATLAB assignment. Fortunately, it’s pretty easy to load <strong><code>.mat</code></strong> files in Python using the <strong><code>loadmat</code></strong> function from <a href="https://www.scipy.org/">SciPy</a>. We’ll also need <a href="http://www.numpy.org/">NumPy</a> and <a href="https://matplotlib.org/">Matplotlib</a> for matrix operations and data visualization:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> opt <span class="comment"># we&#x27;ll need this later</span></span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> sio</span><br><span class="line"></span><br><span class="line">dataset = sio.loadmat(<span class="string">&quot;water.mat&quot;</span>)</span><br><span class="line">x_train = dataset[<span class="string">&quot;X&quot;</span>]</span><br><span class="line">x_val = dataset[<span class="string">&quot;Xval&quot;</span>]</span><br><span class="line">x_test = dataset[<span class="string">&quot;Xtest&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># squeeze the target variables into one-dimensional arrays</span></span><br><span class="line">y_train = dataset[<span class="string">&quot;y&quot;</span>].squeeze()</span><br><span class="line">y_val = dataset[<span class="string">&quot;yval&quot;</span>].squeeze()</span><br><span class="line">y_test = dataset[<span class="string">&quot;ytest&quot;</span>].squeeze()</span><br></pre></td></tr></table></figure>
<p>The dataset is divided into three samples:</p>
<ul>
<li>The <strong>training sample</strong> consists of <strong><code>x_train</code></strong> and <strong><code>y_train</code>.</strong></li>
<li>The <strong>validation sample</strong> consists of <strong><code>x_val</code></strong> and <strong><code>y_val</code>.</strong></li>
<li>The <strong>test sample</strong> consists of <strong><code>x_test</code></strong> and <strong><code>y_test</code>.</strong></li>
</ul>
<p>Notice that we have to explicitly convert the target variables (<strong><code>y_train</code></strong>, <strong><code>y_val</code></strong> and <strong><code>y_test</code></strong>) to one dimensional vectors, because they are stored as matrices inside the <strong><code>.mat</code></strong> file.</p>
<p>Let’s plot the training sample to see what it looks like:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.scatter(x_train, y_train, marker=<span class="string">&quot;x&quot;</span>, s=<span class="number">40</span>, c=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;change in water level&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;water flowing out of the dam&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Training sample&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<img src="/2018/05/04/learning-curves/learning-curves_3_0.png" class="">

<h4 id="The-Game-Plan"><a href="#The-Game-Plan" class="headerlink" title="The Game Plan"></a>The Game Plan</h4><p>Alright, it’s time to come up with a strategy. First of all, it’s clear that there’s a nonlinear relationship between $x$ and $y$. Normally we would rule out any linear model because of that. However, we are going to begin by training a linear regression model so that we can see how the learning curves of a model with high bias look like. </p>
<p>Then we’ll train a polynomial regression model which is going to be much more flexible than linear regression. This will let us see the learning curves of a model with high variance.</p>
<p>Finally, we’ll add <strong>regularization</strong> to the existing polynomial regression model and see how a balanced model’s learning curves look like.</p>
<h4 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h4><p>I’ve already shown you in the <a href="/2018/04/21/linear-regression/" title="previous post">previous post</a> how to train a linear regression model using gradient descent. Before proceeding any further, I strongly encourage you to take a look at it if you don’t have at least a basic understanding of linear regression.</p>
<p>Here I’ll show you an easier way to train a linear regression model using an optimization function called <strong><code>fmin_cg</code></strong> from <strong><code>scipy.optimize</code>.</strong> You can check out the detailed documentation <a href="https://docs.scipy.org/doc/scipy-0.19.0/reference/generated/scipy.optimize.fmin_cg.html">here</a>. The cool thing about this function is that it’s faster than gradient descent and also you don’t have to select a learning rate by trial and error.</p>
<p><strong><code>fmin_cg</code></strong> needs a function that returns the cost and another one that returns the gradient of the cost for a given hypothesis. We have to pass those to <strong><code>fmin_cg</code></strong> as function arguments. Fortunately, we can reuse some code from the <a href="/2018/04/21/linear-regression/" title="previous post">previous post</a>:</p>
<ul>
<li>We can completely reuse the <strong><code>cost</code></strong> function because it’s independent of the optimization method that we use.</li>
<li>From the <strong><code>gradient_descent</code></strong> function, we can borrow the part where the gradient of the cost function is evaluated.</li>
</ul>
<p>So here’s (almost) all we need in order to train a linear regression model:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">    predictions = X @ theta</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(np.square(predictions - y)) / (<span class="number">2</span> * <span class="built_in">len</span>(y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost_gradient</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">    predictions = X @ theta</span><br><span class="line">    <span class="keyword">return</span> X.transpose() @ (predictions - y) / <span class="built_in">len</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_linear_regression</span>(<span class="params">X, y</span>):</span></span><br><span class="line">    theta = np.zeros(X.shape[<span class="number">1</span>]) <span class="comment"># initialize model parameters with zeros</span></span><br><span class="line">    <span class="keyword">return</span> opt.fmin_cg(cost, theta, cost_gradient, (X, y), disp=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>If you look at our <strong><code>cost</code></strong> function, there we evaluate the cross product of the feature matrix $X$ and the vector of model parameters $\theta$. Remember, this is only possible if the matrix dimensions match. Therefore we also need a tiny utility function to insert an additional first column of all ones to a raw feature matrix such as <strong><code>x_train</code></strong>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_ones</span>(<span class="params">x</span>):</span></span><br><span class="line">    X = np.ones(shape=(x.shape[<span class="number">0</span>], x.shape[<span class="number">1</span>] + <span class="number">1</span>))</span><br><span class="line">    X[:, <span class="number">1</span>:] = x</span><br><span class="line">    <span class="keyword">return</span> X</span><br></pre></td></tr></table></figure>
<p>Now let’s train a linear regression model and plot the linear fit on top of the training sample:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train = insert_ones(x_train)</span><br><span class="line">theta = train_linear_regression(X_train, y_train)</span><br><span class="line">hypothesis = X_train @ theta</span><br><span class="line">ax.plot(X_train[:, <span class="number">1</span>], hypothesis, linewidth=<span class="number">2</span>)</span><br><span class="line">fig</span><br></pre></td></tr></table></figure>
<img src="/2018/05/04/learning-curves/learning-curves_7_0.png" class="">

<h4 id="Learning-Curves-for-Linear-Regression"><a href="#Learning-Curves-for-Linear-Regression" class="headerlink" title="Learning Curves for Linear Regression"></a>Learning Curves for Linear Regression</h4><p>The above plot clearly shows that linear regression is not suitable for this task. Let’s also look at its learning curves and see if we can draw the same conclusion. </p>
<p>While plotting learning curves, we’re going to start with $2$ training examples and increase them one by one. In each iteration, we’ll train a model and evaluate the training error on the existing training sample, and the validation error on the whole validation sample:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">learning_curves</span>(<span class="params">X_train, y_train, X_val, y_val</span>):</span></span><br><span class="line">    train_err = np.zeros(<span class="built_in">len</span>(y_train))</span><br><span class="line">    val_err = np.zeros(<span class="built_in">len</span>(y_train))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(y_train)):</span><br><span class="line">        theta = train_linear_regression(X_train[<span class="number">0</span>:i + <span class="number">1</span>, :], y_train[<span class="number">0</span>:i + <span class="number">1</span>])</span><br><span class="line">        train_err[i] = cost(theta, X_train[<span class="number">0</span>:i + <span class="number">1</span>, :], y_train[<span class="number">0</span>:i + <span class="number">1</span>])</span><br><span class="line">        val_err[i] = cost(theta, X_val, y_val)</span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(y_train) + <span class="number">1</span>), train_err[<span class="number">1</span>:], c=<span class="string">&quot;r&quot;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(y_train) + <span class="number">1</span>), val_err[<span class="number">1</span>:], c=<span class="string">&quot;b&quot;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;number of training examples&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;error&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    plt.legend([<span class="string">&quot;training&quot;</span>, <span class="string">&quot;validation&quot;</span>], loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">    plt.axis([<span class="number">2</span>, <span class="built_in">len</span>(y_train), <span class="number">0</span>, <span class="number">100</span>])</span><br><span class="line">    plt.grid()</span><br></pre></td></tr></table></figure>
<p>In order to use this function, we have to resize <strong><code>x_val</code></strong> just like we did <strong><code>x_train</code></strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_val = insert_ones(x_val)</span><br><span class="line">plt.title(<span class="string">&quot;Learning Curves for Linear Regression&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">learning_curves(X_train, y_train, X_val, y_val)</span><br></pre></td></tr></table></figure>
<img src="/2018/05/04/learning-curves/learning-curves_11_0.png" class="">
<br>

<p>As expected, we were unable to sufficiently decrease either the training or the validation error.</p>
<h4 id="Polynomial-Regression"><a href="#Polynomial-Regression" class="headerlink" title="Polynomial Regression"></a>Polynomial Regression</h4><p>Now it’s time to introduce some nonlinearity with polynomial regression.</p>
<h5 id="Feature-Mapping"><a href="#Feature-Mapping" class="headerlink" title="Feature Mapping"></a>Feature Mapping</h5><p>In order to train a polynomial regression model, the existing feature(s) have to be mapped to artificially generated polynomial features. Then the rest is pretty much the same drill.</p>
<p>In our case we only have a single feature $x_1$, the change in water level. Therefore we can simply compute the first several powers of $x_1$ to artificially obtain new polynomial features. Let’s create a simple function for this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poly_features</span>(<span class="params">x, degree</span>):</span></span><br><span class="line">    X_poly = np.zeros(shape=(<span class="built_in">len</span>(x), degree))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, degree):</span><br><span class="line">        X_poly[:, i] = x.squeeze() ** (i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> X_poly</span><br></pre></td></tr></table></figure>
<p>Now let’s generate new feature matrices for training, validation and test samples with 8 polynomial features in each:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_train_poly = poly_features(x_train, <span class="number">8</span>)</span><br><span class="line">x_val_poly = poly_features(x_val, <span class="number">8</span>)</span><br><span class="line">x_test_poly = poly_features(x_test, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<h5 id="Feature-Normalization"><a href="#Feature-Normalization" class="headerlink" title="Feature Normalization"></a>Feature Normalization</h5><p>Ok, we have our polynomial features but we also have a tiny little problem. If you take a closer look at one of the new matrices, you’ll see that the polynomial features are very imbalanced at the moment. For instance, let’s look at the first few rows of the <strong><code>x_train_poly</code></strong> matrix:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x_train_poly[:<span class="number">4</span>, :])</span><br></pre></td></tr></table></figure>
<pre><code>[[ -1.59367581e+01   2.53980260e+02  -4.04762197e+03   6.45059724e+04
   -1.02801608e+06   1.63832436e+07  -2.61095791e+08   4.16102047e+09]
 [ -2.91529792e+01   8.49896197e+02  -2.47770062e+04   7.22323546e+05
   -2.10578833e+07   6.13900035e+08  -1.78970150e+10   5.21751305e+11]
 [  3.61895486e+01   1.30968343e+03   4.73968522e+04   1.71527069e+06
    6.20748719e+07   2.24646160e+09   8.12984311e+10   2.94215353e+12]
 [  3.74921873e+01   1.40566411e+03   5.27014222e+04   1.97589159e+06
    7.40804977e+07   2.77743990e+09   1.04132297e+11   3.90414759e+12]]</code></pre>
<p>As the polynomial degree increases, the values in the corresponding columns exponentially grow to the point where they differ by orders of magnitude. </p>
<p>The thing is, the cost function will generally converge much more slowly when the features are imbalanced like this. So we need to make sure that our features are on a similar scale before we begin to train our model. We’re going to do this in two steps:</p>
<ol>
<li>Subtract the mean value of each column from itself and make the new mean $0$.</li>
<li>Divide the values in each column by their standard deviation and make the new standard deviation $1$.</li>
</ol>
<p>It’s important that we use the mean and standard deviation values from the training sample while normalizing the validation and test samples.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_means = x_train_poly.mean(axis=<span class="number">0</span>)</span><br><span class="line">train_stdevs = np.std(x_train_poly, axis=<span class="number">0</span>, ddof=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">x_train_poly = (x_train_poly - train_means) / train_stdevs</span><br><span class="line">x_val_poly = (x_val_poly - train_means) / train_stdevs</span><br><span class="line">x_test_poly = (x_test_poly - train_means) / train_stdevs</span><br><span class="line"></span><br><span class="line">X_train_poly = insert_ones(x_train_poly)</span><br><span class="line">X_val_poly = insert_ones(x_val_poly)</span><br><span class="line">X_test_poly = insert_ones(x_test_poly)</span><br></pre></td></tr></table></figure>
<p>Finally we can train our polynomial regression model by using our <strong><code>train_linear_regression</code></strong> function and plot the polynomial fit. Note that when the polynomial features are simply treated as independent features, training a polynomial regression model is no different than training a multivariate linear regression model:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_fit</span>(<span class="params">min_x, max_x, means, stdevs, theta, degree</span>):</span></span><br><span class="line">    x = np.linspace(min_x - <span class="number">5</span>, max_x + <span class="number">5</span>, <span class="number">1000</span>)</span><br><span class="line">    x_poly = poly_features(x, degree)</span><br><span class="line">    x_poly = (x_poly - means) / stdevs</span><br><span class="line">    x_poly = insert_ones(x_poly)</span><br><span class="line">    plt.plot(x, x_poly @ theta, linewidth=<span class="number">2</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">theta = train_linear_regression(X_train_poly, y_train)</span><br><span class="line">plt.scatter(x_train, y_train, marker=<span class="string">&quot;x&quot;</span>, s=<span class="number">40</span>, c=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;change in water level&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;water flowing out of the dam&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Polynomial Fit&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plot_fit(<span class="built_in">min</span>(x_train), <span class="built_in">max</span>(x_train), train_means, train_stdevs, theta, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<img src="/2018/05/04/learning-curves/learning-curves_23_0.png" class="">
<br>

<p>What do you think, seems pretty accurate right? Let’s take a look at the learning curves.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.title(<span class="string">&quot;Learning Curves for Polynomial Regression&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">learning_curves(X_train_poly, y_train, X_val_poly, y_val)</span><br></pre></td></tr></table></figure>
<img src="/2018/05/04/learning-curves/learning-curves_25_0.png" class="">
<br>

<p>Now that’s overfitting written all over it. Even though the training error is very low, the validation error miserably fails to converge.</p>
<p>It appears that we need something in between in terms of flexibility. Although we can’t make linear regression more flexible, we can decrease the flexibility of polynomial regression using <a href="https://www.quora.com/What-is-regularization-in-machine-learning">regularization</a>.</p>
<h4 id="Regularized-Polynomial-Regression"><a href="#Regularized-Polynomial-Regression" class="headerlink" title="Regularized Polynomial Regression"></a>Regularized Polynomial Regression</h4><p>Regularization lets us come up with simpler hypothesis functions that are less prone to overfitting. This is achieved by penalizing large $\theta$ values during the training stage.</p>
<p>Here’s the regularized cost function:</p>
<p>$J(\theta) = \dfrac{1}{2m}\Big(\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)})^2\Big) +<br>             \dfrac{\lambda}{2m}\Big(\sum\limits_{j=1}^{n}\theta_j^2\Big)$</p>
<p>And its gradient becomes:</p>
<p>$\dfrac{\partial J(\theta)}{\partial \theta_0} =<br> \dfrac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)}<br> \quad \qquad \qquad \qquad for ,, j = 0$</p>
<p>$\dfrac{\partial J(\theta)}{\partial \theta_j} =<br> \Big(\dfrac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)}\Big) + \dfrac{\lambda}{m}\theta_j<br> ,,\quad \qquad for ,, j \geq 0$</p>
<p>Notice that we are not penalizing the intercept term $\theta_0.$ That’s because it doesn’t have anything to do with the model’s flexibility.</p>
<p>Of course we’ll need to reflect these changes to the corresponding Python implementations by introducing a regularization parameter <strong><code>lamb</code></strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">theta, X, y, lamb=<span class="number">0</span></span>):</span></span><br><span class="line">    predictions = X @ theta</span><br><span class="line">    squared_errors = np.<span class="built_in">sum</span>(np.square(predictions - y))</span><br><span class="line">    regularization = np.<span class="built_in">sum</span>(lamb * np.square(theta[<span class="number">1</span>:]))</span><br><span class="line">    <span class="keyword">return</span> (squared_errors + regularization) / (<span class="number">2</span> * <span class="built_in">len</span>(y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost_gradient</span>(<span class="params">theta, X, y, lamb=<span class="number">0</span></span>):</span></span><br><span class="line">    predictions = X @ theta</span><br><span class="line">    gradient = X.transpose() @ (predictions - y)</span><br><span class="line">    regularization = lamb * theta</span><br><span class="line">    regularization[<span class="number">0</span>] = <span class="number">0</span> <span class="comment"># don&#x27;t penalize the intercept term</span></span><br><span class="line">    <span class="keyword">return</span> (gradient + regularization) / <span class="built_in">len</span>(y)</span><br></pre></td></tr></table></figure>
<p>We also have to slightly modify <strong><code>train_linear_regression</code></strong> and <strong><code>learning_curves</code></strong>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_linear_regression</span>(<span class="params">X, y, lamb=<span class="number">0</span></span>):</span></span><br><span class="line">    theta = np.zeros(X.shape[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> opt.fmin_cg(cost, theta, cost_gradient, (X, y, lamb), disp=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">learning_curves</span>(<span class="params">X_train, y_train, X_val, y_val, lamb=<span class="number">0</span></span>):</span></span><br><span class="line">    train_err = np.zeros(<span class="built_in">len</span>(y_train))</span><br><span class="line">    val_err = np.zeros(<span class="built_in">len</span>(y_train))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(y_train)):</span><br><span class="line">        theta = train_linear_regression(X_train[<span class="number">0</span>:i + <span class="number">1</span>, :], y_train[<span class="number">0</span>:i + <span class="number">1</span>], lamb)</span><br><span class="line">        train_err[i] = cost(theta, X_train[<span class="number">0</span>:i + <span class="number">1</span>, :], y_train[<span class="number">0</span>:i + <span class="number">1</span>])</span><br><span class="line">        val_err[i] = cost(theta, X_val, y_val)</span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(y_train) + <span class="number">1</span>), train_err[<span class="number">1</span>:], c=<span class="string">&quot;r&quot;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(y_train) + <span class="number">1</span>), val_err[<span class="number">1</span>:], c=<span class="string">&quot;b&quot;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;number of training examples&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;error&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    plt.legend([<span class="string">&quot;Training&quot;</span>, <span class="string">&quot;Validation&quot;</span>], loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">    plt.axis([<span class="number">2</span>, <span class="built_in">len</span>(y_train), <span class="number">0</span>, <span class="number">100</span>])</span><br><span class="line">    plt.grid()</span><br></pre></td></tr></table></figure>
<p>Alright we’re now ready to train a regularized polynomial regression model. Let’s set $\lambda = 1$ and plot our polynomial hypothesis on top of the training sample:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = train_linear_regression(X_train_poly, y_train, <span class="number">1</span>)</span><br><span class="line">plt.scatter(x_train, y_train, marker=<span class="string">&quot;x&quot;</span>, s=<span class="number">40</span>, c=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;change in water level&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;water flowing out of the dam&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Regularized Polynomial Fit&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plot_fit(<span class="built_in">min</span>(x_train), <span class="built_in">max</span>(x_train), train_means, train_stdevs, theta, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<img src="/2018/05/04/learning-curves/learning-curves_31_0.png" class="">
<br>

<p>It is clear that this hypothesis is much less flexible than the unregularized one. Let’s plot the learning curves and observe its bias-variance tradeoff: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.title(<span class="string">&quot;Learning Curves for Regularized Polynomial Regression&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">learning_curves(X_train_poly, y_train, X_val_poly, y_val, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<img src="/2018/05/04/learning-curves/learning-curves_33_0.png" class="">
<br>

<p>This is apparently the best model we’ve come up so far.</p>
<h5 id="Choosing-the-Optimal-Regularization-Parameter"><a href="#Choosing-the-Optimal-Regularization-Parameter" class="headerlink" title="Choosing the Optimal Regularization Parameter"></a>Choosing the Optimal Regularization Parameter</h5><p>Although setting $\lambda = 1$ has significantly improved the unregularized model, we can do even better by optimizing $\lambda$ as well. Here’s how we’re going to do it:</p>
<ol>
<li>Select a set of $\lambda$ values to try out.</li>
<li>Train a model for each $\lambda$ in the set.</li>
<li>Find the $\lambda$ value that yields the minimum validation error.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lambda_values = [<span class="number">0</span>, <span class="number">0.001</span>, <span class="number">0.003</span>, <span class="number">0.01</span>, <span class="number">0.03</span>, <span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>];</span><br><span class="line">val_err = []</span><br><span class="line"><span class="keyword">for</span> lamb <span class="keyword">in</span> lambda_values:</span><br><span class="line">    theta = train_linear_regression(X_train_poly, y_train, lamb)</span><br><span class="line">    val_err.append(cost(theta, X_val_poly, y_val))</span><br><span class="line">plt.plot(lambda_values, val_err, c=<span class="string">&quot;b&quot;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="built_in">len</span>(lambda_values), <span class="number">0</span>, val_err[-<span class="number">1</span>] + <span class="number">1</span>])</span><br><span class="line">plt.grid()</span><br><span class="line">plt.xlabel(<span class="string">&quot;lambda&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;error&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Validation Curve&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<img src="/2018/05/04/learning-curves/learning-curves_35_0.png" class="">
<br>

<p>Looks like we’ve achieved the lowest validation error where $\lambda = 3$.</p>
<h4 id="Evaluating-Test-Errors"><a href="#Evaluating-Test-Errors" class="headerlink" title="Evaluating Test Errors"></a>Evaluating Test Errors</h4><p>It’s good practice to evaluate an optimized model’s accuracy on a separate test sample other than the training and validation samples. So let’s train our models once again and compare test errors:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_test = insert_ones(x_test)</span><br><span class="line">theta = train_linear_regression(X_train, y_train)</span><br><span class="line">test_error = cost(theta, X_test, y_test)</span><br><span class="line">print(<span class="string">&quot;Test Error =&quot;</span>, test_error, <span class="string">&quot;| Linear Regression&quot;</span>)</span><br><span class="line"></span><br><span class="line">theta = train_linear_regression(X_train_poly, y_train)</span><br><span class="line">test_error = cost(theta, X_test_poly, y_test)</span><br><span class="line">print(<span class="string">&quot;Test Error =&quot;</span>, test_error, <span class="string">&quot;| Polynomial Regression&quot;</span>)</span><br><span class="line"></span><br><span class="line">theta = train_linear_regression(X_train_poly, y_train, <span class="number">3</span>)</span><br><span class="line">test_error = cost(theta, X_test_poly, y_test)</span><br><span class="line">print(<span class="string">&quot;Test Error =&quot;</span>, test_error, <span class="string">&quot;| Regularized Polynomial Regression (at lambda = 3)&quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Test Error = 32.5057492449 | Linear Regression
Test Error = 17.2624144407 | Polynomial Regression
Test Error = 3.85988782246 | Regularized Polynomial Regression (at lambda = 3)</code></pre>
<p>If you’re still here, you should <a href="/subscribe">subscribe</a> to get updates on my future articles.</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Training a Simple Linear Regression Model From Scratch</title>
    <url>/2018/04/21/linear-regression/</url>
    <content><![CDATA[<p>Hey everyone, welcome to my first blog post! This is going to be a walkthrough on training a simple linear regression model in Python. I’ll show you how to do it from scratch, without using any machine learning tools or libraries. We’ll only use <a href="http://www.numpy.org/">NumPy</a> and <a href="https://matplotlib.org/">Matplotlib</a> for matrix operations and data visualization.</p>
<a id="more"></a>

<h4 id="Problem-amp-Dataset"><a href="#Problem-amp-Dataset" class="headerlink" title="Problem &amp; Dataset"></a>Problem &amp; Dataset</h4><p>We’ll look at a regression problem from a very popular <a href="https://www.coursera.org/learn/machine-learning">machine learning course</a> taught by <a href="http://www.andrewng.org/">Andrew Ng</a>. Our objective in this problem will be to train a model that accurately predicts the profits of a food truck.</p>
<p>The first column in our <a href="/2018/04/21/linear-regression/food_truck_data.txt" title="dataset file">dataset file</a> contains city populations and the second column contains food truck profits in each city, both in $10,000$s. Here are the first few training examples:</p>
<figure class="highlight sh"><figcaption><span>food_truck_data.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">6.1101,17.592</span><br><span class="line">5.5277,9.1302</span><br><span class="line">8.5186,13.662</span><br><span class="line">7.0032,11.854</span><br><span class="line">5.8598,6.8233</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>We’re going to use this dataset as a training sample to build our model. Let’s begin by loading it:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;food_truck_data.txt&#x27;</span>, delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">x = data[:, <span class="number">0</span>] <span class="comment"># city populations</span></span><br><span class="line">y = data[:, <span class="number">1</span>] <span class="comment"># food truck profits</span></span><br></pre></td></tr></table></figure>
<p>Both $x$ and $y$ are one dimensional arrays, because we have one <strong>feature</strong> (population) and one <strong>target variable</strong> (profit) in this problem. Therefore we can conveniently visualize our dataset using a scatter plot:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.scatter(x, y, marker=<span class="string">&quot;x&quot;</span>, c=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Food Truck Dataset&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;City Population in 10,000s&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Food Truck Profit in 10,000s&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.axis([<span class="number">4</span>, <span class="number">25</span>, -<span class="number">5</span>, <span class="number">25</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<img src="/2018/04/21/linear-regression/linear-regression_3_0.png" class="">


<h4 id="Hypothesis-Function"><a href="#Hypothesis-Function" class="headerlink" title="Hypothesis Function"></a>Hypothesis Function</h4><p>Now we need to come up with a <strong>straight line</strong> which accurately represents the relationship between population and profit. This is called the <strong>hypothesis function</strong> and it’s formulated as:</p>
<p>$h_\theta(x) = \theta^Tx = \theta_0 + \theta_1x_1 + \theta_2x_2 + … + \theta_nx_n$</p>
<p>where $x$ corresponds to the feature matrix and $\theta$ corresponds to the vector of <strong>model parameters.</strong></p>
<p>Since we have a single feature $x_1,$ we’ll only have two model parameters $\theta_0$ and $\theta_1$ in our hypothesis function:</p>
<p>$h_\theta(x) = \theta_0 + \theta_1x_1$</p>
<p>As you may have noticed, the number of model parameters is equal to the number of features plus $1$. That’s because each feature is weighted by a parameter to control its impact on the hypothesis $h_\theta(x)$. There is also an independent parameter $\theta_0$ called the <strong>intercept term,</strong> which defines the point where the hypothesis function intercepts the $y$-axis as demonstrated below:</p>
<img src="/2018/04/21/linear-regression/intercept_term.png" class="">
<br>
The predictions of a hypothesis function can easily be evaluated in Python by computing the cross product of $x$ and $\theta^T.$ At the moment we have our $x$ and $y$ vectors but we don't have our model parameters yet. So let's create those as well and initialize them with zeros:

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = np.zeros(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>Also, we have to make sure that the matrix dimensions of $x$ and $\theta^T$ are compatible with each other for cross product. Currently $x$ has $1$ column but $\theta^T$ has $2$ rows. The dimensions don’t match because of the additional intercept term $\theta_0.$</p>
<p>We can solve this issue by prepending a column to $x$ and set it to all ones. This is essentially equivalent to creating a new feature $x_0 = 1.$ This extra column won’t affect the hypothesis whatsoever because $\theta_0$ is going to be multiplied by $1$ in the cross product.</p>
<p>Let’s create a new variable $X$ to store the extended $x$ matrix:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.ones(shape=(<span class="built_in">len</span>(x), <span class="number">2</span>))</span><br><span class="line">X[:, <span class="number">1</span>] = x</span><br></pre></td></tr></table></figure>
<p>Finally, we can compute the predictions of our hypothesis as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions = X @ theta</span><br></pre></td></tr></table></figure>
<p>Of course, the predictions are currently all zeros because we haven’t trained our model yet.</p>
<h4 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h4><p>The objective in training a linear regression model is to minimize a <strong>cost function</strong>, which measures the difference between actual $y$ values in the training sample and predictions made by the hypothesis function $h_\theta(x)$.</p>
<p>Such a cost function can be formulated as;</p>
<p>$J(\theta) = \dfrac{1}{2m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)})^2$</p>
<p>where $m$ is the number of training examples.</p>
<p>Here’s its Python version:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">    predictions = X @ theta</span><br><span class="line">    squared_errors = np.square(predictions - y)</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(squared_errors) / (<span class="number">2</span> * <span class="built_in">len</span>(y))</span><br></pre></td></tr></table></figure>
<p>Now let’s take a look at the cost of our initial untrained model:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;The initial cost is:&#x27;</span>, cost(theta, X, y))</span><br></pre></td></tr></table></figure>
<pre><code>The initial cost is: 32.0727338775</code></pre>
<h4 id="Gradient-Descent-Algorithm"><a href="#Gradient-Descent-Algorithm" class="headerlink" title="Gradient Descent Algorithm"></a>Gradient Descent Algorithm</h4><p>Since our hypothesis is based on the model parameters $\theta$, we must somehow adjust them to minimize our cost function $J(\theta)$. This is where the <strong>gradient descent</strong> algorithm comes into play. It’s an optimization algorithm which can be used in minimizing <a href="https://en.wikipedia.org/wiki/Differentiable_function">differentiable</a> functions. Luckily our cost function $J(\theta)$ happens to be a differentiable one.</p>
<p>So here’s how the gradient descent algorithm works in a nutshell: </p>
<p>In each iteration, it takes a small step in the opposite gradient direction of $J(\theta)$. This makes the model parameters $\theta$ gradually come closer to the optimal values. This process is repeated until eventually the minimum cost is achieved.</p>
<p>More formally, gradient descent performs the following update in each iteration: </p>
<p>$\theta_j := \theta_j - \alpha\frac{1}{m}\sum\limits_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)})x^{(i)}_j$</p>
<p>The $\alpha$ term here is called the <strong>learning rate</strong>. It allows us to control the step size to update $\theta$ in each iteration. Choosing a too large learning rate may prevent us from converging to a minimum cost, whereas choosing a too small learning rate may significantly slow down the algorithm.</p>
<p>Here’s a generic implementation of the gradient descent algorithm:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">X, y, alpha, num_iters</span>):</span></span><br><span class="line">    num_features = X.shape[<span class="number">1</span>]               </span><br><span class="line">    theta = np.zeros(num_features)          <span class="comment"># initialize model parameters</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(num_iters):</span><br><span class="line">        predictions = X @ theta             <span class="comment"># compute predictions based on the current hypothesis</span></span><br><span class="line">        errors = predictions - y</span><br><span class="line">        gradient = X.transpose() @ errors</span><br><span class="line">        theta -= alpha * gradient / <span class="built_in">len</span>(y)  <span class="comment"># update model parameters</span></span><br><span class="line">    <span class="keyword">return</span> theta                            <span class="comment"># return optimized parameters</span></span><br></pre></td></tr></table></figure>
<p>Now let’s use this function to train our model and plot the hypothesis function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = gradient_descent(X, y, <span class="number">0.02</span>, <span class="number">600</span>)   <span class="comment"># run GD for 600 iterations with learning rate = 0.02</span></span><br><span class="line">predictions = X @ theta                     <span class="comment"># predictions made by the optimized model</span></span><br><span class="line">ax.plot(X[:, <span class="number">1</span>], predictions, linewidth=<span class="number">2</span>)  <span class="comment"># plot the hypothesis on top of the training data</span></span><br><span class="line">fig</span><br></pre></td></tr></table></figure>
<img src="/2018/04/21/linear-regression/linear-regression_15_0.png" class="">

<h4 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h4><p>Our linear fit looks pretty good, right? The algorithm must have successfully optimized our model.</p>
<p>Well, to be honest, it’s been fairly easy to visualize the hypothesis because there’s only one feature in this problem. </p>
<p>But what if we had multiple features? Then it wouldn’t be possible to simply plot the hypothesis to see whether the algorithm has worked as intended or not.</p>
<p>Fortunately, there’s a simple way to debug the gradient descent algorithm irrespective of the number of features:</p>
<ol>
<li>Modify the gradient descent function to make it record the cost at the end of each iteration. </li>
<li>Plot the cost history after the gradient descent has finished.</li>
<li>Pat yourself on the back if you see that the cost has monotonically decreased over time.</li>
</ol>
<p>Here’s the modified version of our gradient descent function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">X, y, alpha, num_iters</span>):</span></span><br><span class="line">    cost_history = np.zeros(num_iters)          <span class="comment"># create a vector to store the cost history</span></span><br><span class="line">    num_features = X.shape[<span class="number">1</span>]               </span><br><span class="line">    theta = np.zeros(num_features)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(num_iters):</span><br><span class="line">        predictions = X @ theta</span><br><span class="line">        errors = predictions - y</span><br><span class="line">        gradient = X.transpose() @ errors</span><br><span class="line">        theta -= alpha * gradient / <span class="built_in">len</span>(y)</span><br><span class="line">        cost_history[n] = cost(theta, X, y)     <span class="comment"># compute and record the cost</span></span><br><span class="line">    <span class="keyword">return</span> theta, cost_history                  <span class="comment"># return optimized parameters and cost history</span></span><br></pre></td></tr></table></figure>
<p>Now let’s try learning rates $0.01$, $0.015$, $0.02$ and plot the cost history for each one:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">num_iters = <span class="number">1200</span></span><br><span class="line">learning_rates = [<span class="number">0.01</span>, <span class="number">0.015</span>, <span class="number">0.02</span>]</span><br><span class="line"><span class="keyword">for</span> lr <span class="keyword">in</span> learning_rates:</span><br><span class="line">    _, cost_history = gradient_descent(X, y, lr, num_iters)</span><br><span class="line">    plt.plot(cost_history, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Gradient descent with different learning rates&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;number of iterations&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;cost&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.legend(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, learning_rates)))</span><br><span class="line">plt.axis([<span class="number">0</span>, num_iters, <span class="number">4</span>, <span class="number">6</span>])</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<img src="/2018/04/21/linear-regression/linear-regression_19_0.png" class="" title="image_description">

<p>It appears that the gradient descent algorithm worked correctly for these particular learning rates. Notice that it takes more iterations to minimize the cost as the learning rate decreases.</p>
<p>Now let’s try a larger learning rate and see what happens:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learning_rate = <span class="number">0.025</span></span><br><span class="line">num_iters = <span class="number">50</span></span><br><span class="line">_, cost_history = gradient_descent(X, y, learning_rate, num_iters)</span><br><span class="line">plt.plot(cost_history, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Gradient descent with learning rate = &quot;</span> + <span class="built_in">str</span>(learning_rate), fontsize=<span class="number">16</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;number of iterations&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;cost&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>, num_iters, <span class="number">0</span>, <span class="number">6000</span>])</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<img src="/2018/04/21/linear-regression/linear-regression_21_0.png" class="" title="image_description">
<br>
Doesn't look good... That's what happens when the learning rate is too large. Even though the gradient descent algorithm takes steps in the correct direction, these steps are so huge that it's going to overshoot the target and the cost diverges from the minimum value instead of converging to it.

<p>Right now we can safely set the learning rate to $0.02$, because it allows us to minimize the cost and it requires relatively fewer iterations to converge.</p>
<h4 id="Prediction"><a href="#Prediction" class="headerlink" title="Prediction"></a>Prediction</h4><p>Now that we’ve learned how to train our model, we can finally predict the food truck profit for a particular city:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta, _ = gradient_descent(X, y, <span class="number">0.02</span>, <span class="number">600</span>)    <span class="comment"># train the model</span></span><br><span class="line">test_example = np.array([<span class="number">1</span>, <span class="number">7</span>])                 <span class="comment"># pick a city with 70,000 population as a test example</span></span><br><span class="line">prediction = test_example @ theta               <span class="comment"># use the trained model to make a prediction</span></span><br><span class="line">print(<span class="string">&#x27;For population = 70,000, we predict a profit of $&#x27;</span>, prediction * <span class="number">10000</span>);</span><br></pre></td></tr></table></figure>
<pre><code>For population = 70,000, we predict a profit of $ 45905.6621788</code></pre>
<p>If you’re still here, you should <a href="/subscribe">subscribe</a> to get updates on my future articles.</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS Keyboard Settings and Shortcuts for Coding</title>
    <url>/2021/01/17/macos-keyboard-shortcuts/</url>
    <content><![CDATA[<p>Some of the default keyboard settings and shortcuts on macOS simply don’t work for me as a software developer. As soon as I get my hands on a new mac, I change some keyboard settings and shortcuts for general text editing, window management, iTerm2 and some other stuff. I’m going to go over everything I do step by step in this post. I’m sure you’ll find at least some of these tips &amp; tricks pretty useful.</p>
<a id="more"></a>


<h3 id="Keyboard-Type"><a href="#Keyboard-Type" class="headerlink" title="Keyboard Type"></a>Keyboard Type</h3><p>First of all, if you’re using an external keyboard, you should make sure that your keyboard is identified correctly. Usually you don’t have to worry about this, but recently my keyboard was identified incorrectly for some reason while I was setting up macOS for the first time on my new Mac Mini.</p>
<p>You can check the identified keyboard type from <strong>System Preferences</strong> &gt; <strong>Keyboard</strong> &gt; <strong>Input Sources</strong></p>
<img src="/2021/01/17/macos-keyboard-shortcuts/keyboard-layout.png" class="">

<p>If you find out that it’s incorrect, go to <strong>System Preferences</strong> &gt; <strong>Keyboard</strong> &gt; <strong>Keyboard</strong> and select <strong>Change Keyboard Type</strong></p>
<p>For me, it turns out my keyboard was identified as <strong>ANSI</strong> while it’s actually <strong>ISO</strong>, so I had to change it:</p>
<img src="/2021/01/17/macos-keyboard-shortcuts/keyboard-type.png" class="">


<h3 id="iTerm2-Natural-Text-Editing"><a href="#iTerm2-Natural-Text-Editing" class="headerlink" title="iTerm2 Natural Text Editing"></a>iTerm2 Natural Text Editing</h3><p>Natural text editing shortcuts such as the ones below do not work by default on iTerm2:</p>
<ul>
<li><code>⌥→</code> (next word)</li>
<li><code>⌥←</code> (previous word)</li>
<li><code>⌃→</code> (end of line)</li>
<li><code>⌃←</code> (start of line)</li>
</ul>
<p>You have to set the preset as “<em>Natural Text Editing</em>“ in order to fix this:</p>
<p><strong>iTerm2</strong> &gt; <strong>Preferences</strong> &gt; <strong>Profiles</strong> &gt; <strong>[Profile Name]</strong> &gt; <strong>Keys</strong> &gt; <strong>Presets</strong></p>
<img src="/2021/01/17/macos-keyboard-shortcuts/iterm-natural-text-editing.png" class="">


<h3 id="iTerm2-Tab-Pane-Switching"><a href="#iTerm2-Tab-Pane-Switching" class="headerlink" title="iTerm2 Tab/Pane Switching"></a>iTerm2 Tab/Pane Switching</h3><p>iTerm2 lets you create multiple tabs, and you can even split a tab into multiple panes.</p>
<ul>
<li><code>⌘T</code> creates a new tab</li>
<li><code>⌘D</code> creates a new pane by splitting the existing tab horizontally</li>
<li><code>⇧⌘D</code> creates a new pane by splitting the existing tab vertically</li>
</ul>
<img src="/2021/01/17/macos-keyboard-shortcuts/iterm-multi-tabs.png" class="">
<img src="/2021/01/17/macos-keyboard-shortcuts/iterm-multi-panes.png" class="">

<p>These default shortcuts for creating tabs &amp; panes are pretty nice. However, I don’t like the default shortcuts for switching between tabs/panes. That’s why I override them like this:</p>
<p><strong>iTerm2</strong> &gt; <strong>Preferences</strong> &gt; <strong>Keys</strong> &gt; <strong>Key Bindings</strong></p>
<img src="/2021/01/17/macos-keyboard-shortcuts/iterm-tabs-and-panes.png" class="">


<h3 id="Switching-Between-Windows-of-the-Same-App"><a href="#Switching-Between-Windows-of-the-Same-App" class="headerlink" title="Switching Between Windows of the Same App"></a>Switching Between Windows of the Same App</h3><p><code>⌘Tab</code> is pretty useful for switching between different apps. What if you need to switch between windows of the same app? Sometimes, I have multiple iTerm2 windows or multiple VSCode windows open at the same time and I want to be able to quickly switch between those. Here’s how you can (re)assign a shortcut for that:</p>
<p><strong>System Preferences</strong> &gt; <strong>Keyboard</strong> &gt; <strong>Shortcuts</strong> &gt; <strong>Keyboard</strong> &gt; <em>Move focus to next window</em></p>
<img src="/2021/01/17/macos-keyboard-shortcuts/move-focus-to-next-window.png" class="">


<h3 id="Window-Organizer-Spectacle"><a href="#Window-Organizer-Spectacle" class="headerlink" title="Window Organizer: Spectacle"></a>Window Organizer: Spectacle</h3><p><a href="https://www.spectacleapp.com/">Spectacle</a> is a free app that lets you organize and resize your windows using keyboard shortcuts:</p>
<img src="/2021/01/17/macos-keyboard-shortcuts/spectacle-shortcuts.png" class="">

<p>It’s no longer actively maintained, but I’ve been using it for a couple of years and I’ve had zero issues so far. It’s quite simple, and the default shortcuts are pretty good.</p>
<h3 id="Key-Repeat-and-Delay"><a href="#Key-Repeat-and-Delay" class="headerlink" title="Key Repeat and Delay"></a>Key Repeat and Delay</h3><p>I use Vim for text editing, which means I don’t use my mouse to navigate in the text editor. That’s why I frequently need to press and hold some keys for scrolling up/down/left/right in the editor.</p>
<p>By default, key repeat is too slow and the delay until repeat is too long to do that fluidly. I adjust the settings like this, but you should experiment with each option on your favorite text editor and see what works for you the best:</p>
<p><strong>System Preferences</strong> &gt; <strong>Keyboard</strong> &gt; <strong>Keyboard</strong></p>
<img src="/2021/01/17/macos-keyboard-shortcuts/key-repeat-and-delay.png" class="">


<h3 id="VSCodeVim-Extension"><a href="#VSCodeVim-Extension" class="headerlink" title="VSCodeVim Extension"></a>VSCodeVim Extension</h3><p><em>You should only read this section if you use both <a href="https://code.visualstudio.com/">VSCode</a> and the <a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">VSCodeVim</a> extension.</em></p>
<p>Pressing and holding the arrow keys (<code>←</code>, <code>→</code>, <code>↑</code>, <code>↓</code>) lets you fluidly navigate between rows (lines) and columns (characters) in the editor by default.</p>
<p>Unfortunately, that’s not the case for Vim equivalents (<code>h</code>, <code>l</code>, <code>k</code>, <code>j</code>). For instance, even if you press and hold the <code>j</code> key, it only advances to the next line and it gets stuck there by default. You have to run one of the following commands after installing the VSCodeVim extension to have the same fluid behavior, <a href="https://github.com/VSCodeVim/Vim#mac">as pointed out</a> in the GitHub page of the extension:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># For VS Code</span><br><span class="line">defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false</span><br><span class="line"></span><br><span class="line"># For VS Code Insider</span><br><span class="line">defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool false</span><br><span class="line"></span><br><span class="line"># For VS Codium</span><br><span class="line">defaults write com.visualstudio.code.oss ApplePressAndHoldEnabled -bool false</span><br><span class="line"></span><br><span class="line"># If necessary, reset global default</span><br><span class="line">defaults delete -g ApplePressAndHoldEnabled</span><br></pre></td></tr></table></figure>

<h3 id="A-Handy-Shortcut-Control-Space"><a href="#A-Handy-Shortcut-Control-Space" class="headerlink" title="A Handy Shortcut: Control + Space"></a>A Handy Shortcut: <code>Control + Space</code></h3><p>I think <code>⌃Space</code> is a very handy key combination and should be assigned to a frequently used shortcut. However, it’s assigned to another shortcut by default, so it needs to be unassigned first.</p>
<img src="/2021/01/17/macos-keyboard-shortcuts/zsh-autosuggestions-accept.gif" class="">

<p>My command-line shell preference is <a href="https://www.zsh.org/">zsh</a> and one of my favorite zsh plugins is <a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a>. It allows you to define a custom hotkey to accept the current suggestion. For me, <code>⌃Space</code> fits perfectly into this use case.</p>
<img src="/2021/01/17/macos-keyboard-shortcuts/zsh-autosuggestions.png" class="">


<h3 id="Bonus-Font-Smoothing"><a href="#Bonus-Font-Smoothing" class="headerlink" title="Bonus: Font Smoothing"></a>Bonus: Font Smoothing</h3><p>I know that this isn’t related to keyboard settings or shortcuts, but I still want to mention it because I think it’s important.</p>
<p>I don’t know about your experience, but the default font smoothing is too much for me. What’s worse is, macOS doesn’t let you change this setting easily from system preferences anymore. You have to actually open the terminal and run this command:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0, 1, 2, or 3</span></span><br><span class="line">defaults -currentHost write -globalDomain AppleFontSmoothing -int 1</span><br></pre></td></tr></table></figure>
<p>Setting it to 1 works best for me. I suggest you to experiment with each option (0 is lowest, 3 is highest) and see whichever feels best. Keep in mind that in order to see the effects, you have to logout &amp; login back every time you change the setting.</p>
<h3 id="Tips-From-Other-Articles"><a href="#Tips-From-Other-Articles" class="headerlink" title="Tips From Other Articles"></a>Tips From Other Articles</h3><ul>
<li><a href="https://osxdaily.com/2019/03/27/disable-period-typing-shortcut-mac/">Stop Typing Periods Automatically with Double-Space</a></li>
</ul>
<hr>
<p>Feel free to leave a comment on <a href="https://twitter.com/utkufu">Twitter</a> if you have some other tips &amp; tricks that haven’t been covered in this article. I’d love to hear them!</p>
]]></content>
      <tags>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>I had to build a web scraper to buy groceries</title>
    <url>/2020/03/28/grocery-scraping/</url>
    <content><![CDATA[<p>Grocery shopping has been one of my least favorite chores, even before the pandemic. Unlike many people I know, I always preferred online shopping over going to the supermarket. Now it’s not a matter of personal preference anymore; everybody stays at home and especially avoids crowded indoor places like supermarkets. It’s good to know that people are acting responsibly, but I never thought this could mean that I won’t be able to do online grocery shopping anymore!</p>
<a id="more"></a>

<p>Here’s the deal; very few supermarket chains in Turkey have online stores. <a href="https://www.migros.com.tr/">Migros Sanalmarket</a> is one of them and it’s arguably the best one. But they don’t have unlimited resources, obviously. When everybody decided to switch to online shopping all of a sudden, they couldn’t handle that demand spike. Even though their delivery system works from 8:30 AM to 10:00 PM every day, it’s virtually impossible to find an empty slot, that is if you play nicely.</p>
<p>I’ve frequently visited the online store for the past two weeks and attempted to place an order, but I always got this message (translated from Turkish):</p>
<blockquote>
<p>“We do not have delivery to the neighborhood you have chosen for the next 4 days.”</p>
</blockquote>
<p>Probably as soon as new slots are opened, they get occupied in minutes by a few dozen lucky people who happen to be online at that time.</p>
<p>I didn’t want to resort to violence but after yet another failed attempt yesterday, I got really frustrated and finally unsheathed Chrome developer tools. I looked at the <em>Network</em> tab to see which HTTP request was returning the above response. I found out that there was an endpoint for checking live delivery availability, and it was getting hit automatically when a logged-in user visited the website.</p>
<p>The first step of my plan was to write a script that makes a <code>GET</code> request to that endpoint and checks if delivery is available for my neighborhood within the next 4 days. Firsty, I needed to find out what additional information I had to send with my request to make the server treat me as a logged-in user. I looked at the cookies in the <em>Request Cookies</em> section:</p>
<img src="/2020/03/28/grocery-scraping/request-cookies.png" class="">

<p>The <code>SESSION</code> cookie looks promising, doesn’t it? I did what anybody does when they need to quickly put together a script to get something done; I created a <code>main.py</code> file. The <code>requests</code> package is more than capable of setting cookies and making simple HTTP requests. This is how I tried to get the same response from the server programmatically:</p>
<figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy &amp; paste the SESSION cookie value obtained from request headers</span></span><br><span class="line">session = requests.Session()</span><br><span class="line">jar = requests.cookies.RequestsCookieJar()</span><br><span class="line">jar.<span class="built_in">set</span>(<span class="string">&#x27;SESSION&#x27;</span>, <span class="string">&#x27;Y2IxOWE0YWQtNmM0Ni00ZWYzLTkzYmItOGI4YWQ0MDI1MTg4&#x27;</span>)</span><br><span class="line">session.cookies = jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># make a GET request to the delivery availability endpoint</span></span><br><span class="line">r = session.get(<span class="string">&#x27;https://www.migros.com.tr/teslimat/en-yakin-siparis-dilimi&#x27;</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>I got this response:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;part-area date-header mobile-hide pull-right&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">    Önümüzdeki 4 gün için seçtiğiniz mahalleye teslimatımız bulunmamaktadır.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This is how you say “nope” in Turkish. It was exactly what I wanted to receive. If the session cookie hadn’t worked, or if it hadn’t been enough on its own, I would have received the HTML for a login page. I know because that was what I received when I sent the request without any cookies.</p>
<p>So far so good. I could run a script every minute as a cron job, pipe <code>stdout</code> to a log file and check the logs every once in a while. So I set up the cron job and went AFK for 30 minutes. When I got back, I saw 30 failed attempts.</p>
<p>Obviously, I didn’t want to sit there and check the logs forever. That’s why I decided to use one of my existing Mailgun domains for sending myself an email if and when one of the attempts succeeded. It’s actually pretty easy to send an email using the Mailgun API:</p>
<figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="code"><pre><span class="line">requests.post(</span><br><span class="line">    os.getenv(<span class="string">&#x27;MAILGUN_DOMAIN&#x27;</span>),</span><br><span class="line">    auth=(<span class="string">&quot;api&quot;</span>, os.getenv(<span class="string">&#x27;MAILGUN_SECRET&#x27;</span>)),</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">&quot;from&quot;</span>: os.getenv(<span class="string">&#x27;EMAIL_FROM&#x27;</span>),</span><br><span class="line">        <span class="string">&quot;to&quot;</span>: [os.getenv(<span class="string">&#x27;EMAIL_TO&#x27;</span>)],</span><br><span class="line">        <span class="string">&quot;subject&quot;</span>: <span class="string">&quot;Sanalmarket Is Available!!!&quot;</span>,</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: <span class="string">f&quot;Go to <span class="subst">&#123;os.getenv(<span class="string">&#x27;SHOPPING_CART_URL&#x27;</span>)&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>The only issue was that if my script ever found an available slot, it would start sending an email to me every minute until there were no slots left. I really didn’t want to spam myself. As a solution, I made it so that the script would create a <code>.lock</code> file the first time it received a success response and sent me an email. Also, at the beginning of each execution, it would check that <code>.lock</code> file and terminate immediately if it existed.</p>
<p>After adding the email functionality, I went AFK once more and attended to other stuff. I got an email notification on my phone after about an hour later. The sender was me, I was talking about some nonsense that had something to do with grocery shopping. I checked it out anyway. It turned out that Sanalmarket was available for delivery to my neighborhood if I placed an order immediately! I had already prepared my shopping cart, so all I needed to do was confirm the order. </p>
<p>I received my delivery the morning after. I’m pretty sure that I would’ve never been able to get a chance to make an order anytime soon if it wasn’t for that little hack. </p>
<p>That’s all there is to my mini-adventure for this weekend. <a href="https://github.com/utkuufuk/ping-sm">My script is available on Github</a> for those who are interested. Feel free to <a href="/about">reach me out</a> if you have any comments or questions. Also, make sure to <a href="/subscribe">subscribe</a> if you’re interested in getting email updates on my future articles.</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Web Scraping</tag>
      </tags>
  </entry>
  <entry>
    <title>One Task Board to Rule Them All</title>
    <url>/2020/06/14/one-board/</url>
    <content><![CDATA[<p>Do you ever feel that the numerous productivity tools you use every day actually cost you more time than they are supposed to save? It sure doesn’t feel right when managing your tasks becomes a non-trivial task on its own. On the other hand, there’s no one-size-fits-all solution when it comes to task managers, so it makes sense to use the right tool for the job. To address this dilemma, I recently came up with a simple hack that lets me use all my favorite tools while interacting with just one.</p>
<a id="more"></a>

<p>I’m notoriously bad at remembering things, and my life would be a total mess if I didn’t somehow keep track of my personal tasks. Here are some of my favorite tools I use to manage different kinds of tasks:</p>
<table>
<thead>
<tr>
<th>Tool</th>
<th>Purpose</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>Trello</td>
<td>simple todos</td>
<td><em>write blog post</em></td>
</tr>
<tr>
<td><a href="https://tododock.com/">TodoDock</a></td>
<td>periodic tasks</td>
<td><em>water plants</em></td>
</tr>
<tr>
<td>Github Issues</td>
<td>side-projects</td>
<td><em>fix bug in login page</em></td>
</tr>
<tr>
<td>Google Sheets</td>
<td>daily habits</td>
<td><em>piano practice</em></td>
</tr>
<tr>
<td>Google Calendar</td>
<td>meetings/appointments</td>
<td><em>gRPC webinar</em></td>
</tr>
</tbody></table>
<p>Even though I like the tools themselves individually, having to keep track of all of them at the same time is a pain in the ass, to be frank. On my computer, I literally have to keep 5 browser tabs open just so that I can see what’s on my to-do list at a given time and decide what to do next. It’s even worse when I’m on a mobile device because then I have to cycle through 5 different apps.</p>
<p>I didn’t want to stop using any of those tools, because each one does a great job in certain situations where others can be insufficient. For instance, I like how Google Sheets allows me to visualize my daily habit progress in a grid. I would have to give up on that if I used Trello for my habits.</p>
<p>This is just a subset of my daily habits :)</p>
<img src="/2020/06/14/one-board/daily-habits.png" class="">

<p>Long story short, a few weeks ago I decided to build a tool for periodically grabbing tasks from different sources and putting them in one place. A Trello board seemed to be the perfect place for this because:</p>
<ul>
<li>UX-wise, it’s my favorite</li>
<li>its API and webhooks make it very easy to build automation tools around it</li>
<li>and let’s face it, who doesn’t like kanbans, am I right?</li>
</ul>
<p>Here’s how it works:</p>
<ol>
<li>Query all sources every 5 minutes:</li>
</ol>
<ul>
<li><strong>TodoDock:</strong> tasks due in the next 2 days &mdash; <em><small>TodoDock API</small></em></li>
<li><strong>Github Issues:</strong> non-PR issues that are assigned to me &mdash; <em><small>GitHub API</small></em></li>
<li><strong>Google Sheets:</strong> habits that I haven’t completed yet today &mdash; <em><small>Google Sheets API</small></em></li>
<li><strong>Google Calendar:</strong> <em>not implemented yet</em></li>
</ul>
<ol start="2">
<li>Create a card in the Trello board for each task that doesn’t already exist.</li>
<li>Check if there are any stale cards and remove them from the board. (e.g. if someone closed a Github issue in the past 5 minutes)</li>
</ol>
<p>Feel free to check out the <a href="https://github.com/utkuufuk/entrello">source code</a> and let me know what you think! If you can program in Go, it should be fairly easy to fork and customize for your own needs.</p>
<p>But there’s more. The next thing I did was to create a <a href="https://developer.atlassian.com/cloud/trello/guides/rest-api/webhooks/">Trello webhook</a> to be fired whenever something changes in the board. Then I set up a <a href="https://firebase.google.com/docs/functions">Firebase Cloud Function</a> that listens to that webhook and takes a certain action if a card of interest has been archived. I haven’t open-sourced this yet, but here’s the idea:</p>
<ul>
<li>if a card with <code>tododock</code> label has been archived; reset the corresponding TodoDock task timer</li>
<li>if a card with <code>habit</code> label has been archived, mark the corresponding habit for today as</li>
</ul>
<ul>
<li>✘ &nbsp;if it also has the <code>habit-fail</code> label</li>
<li><strong>–</strong> &nbsp;&nbsp;if it also has the <code>habit-skip</code> label</li>
<li>✔ &nbsp;if it doesn’t have any other labels</li>
</ul>
<p>I don’t handle archived cards for Github issues, because the issue gets closed automatically anyway when you merge a pull request that references it.</p>
<p>I can now enjoy the benefits of using all my favorite tools without even interacting with them manually. Sure I check out my personal habits from time to time to see how I’ve done so far, but I don’t need to open the spreadsheet to see my uncompleted habits for the day, or to manually update the sheet when I complete a habit. The same goes for my GitHub issues and TodoDock tasks.</p>
<p>Feel free to reach me out on <a href="https://twitter.com/utkufu">Twitter</a> for any comments, questions or suggestions you might have. I really like quick hacks like this that save a lot of time and effort compared to how little it takes to code them. So I’m interested in hearing about similar things you’ve come up with that proved useful to you in the past.</p>
<ul>
<li><a href="https://news.ycombinator.com/item?id=23518552">Click here to discuss this on HackerNews.</a></li>
<li><a href="/subscribe">Click here to subscribe to my future articles.</a></li>
</ul>
]]></content>
      <tags>
        <tag>Golang</tag>
        <tag>Google Sheets</tag>
        <tag>Trello</tag>
        <tag>Firebase</tag>
        <tag>GitHub</tag>
        <tag>Task Management</tag>
      </tags>
  </entry>
  <entry>
    <title>Fast Reddit Scraping</title>
    <url>/2018/07/29/reddit-scraping/</url>
    <content><![CDATA[<p>Today I’m going to walk you through the process of scraping search results from <a href="https://www.reddit.com/">Reddit</a> using Python. We’re going to write a simple program that performs a keyword search and extracts useful information from the search results. Then we’re going to improve our program’s performance by taking advantage of parallel processing.</p>
<a id="more"></a>

<h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><p>We’ll be using the following Python 3 libraries to make our job easier:</p>
<ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/">Beautiful Soup 4</a>,</li>
<li><a href="http://docs.python-requests.org/en/master/">Requests</a> to access the HTML content,</li>
<li><a href="https://lxml.de/">LXML</a> as the HTML parser,</li>
<li>and <a href="https://docs.python.org/3.4/library/multiprocessing.html?highlight=process">Multiprocessing</a> to speed things up.</li>
</ul>
<p><code>multiprocessing</code> comes with Python 3 by default as far as I know, but you may need to install the others manually using a package manager such as PIP:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install beautifulsoup4</span><br><span class="line">pip3 install requests</span><br><span class="line">pip3 install lxml</span><br></pre></td></tr></table></figure>
<h4 id="Old-Reddit"><a href="#Old-Reddit" class="headerlink" title="Old Reddit"></a>Old Reddit</h4><p>Before we begin, I want to point out that we’ll be scraping the <a href="https://old.reddit.com/">old Reddit</a>, not the <a href="https://www.reddit.com/">new one</a>. That’s because the new site loads more posts automatically when you scroll down:</p>
<img src="/2018/07/29/reddit-scraping/reddit-scrolling.gif" class="">
<br>

<p>The problem is that it’s not possible to simulate this scroll-down action using a simple tool like <a href="http://docs.python-requests.org/en/master/">Requests</a>. We’d need to use something like <a href="https://github.com/SeleniumHQ/selenium">Selenium</a> for that kind of thing. As a workaround, we’re going to use the <a href="https://old.reddit.com/">old site</a> which is easier to crawl using the links located on the navigation panel:</p>
<img src="/2018/07/29/reddit-scraping/old-navigation.png" class="">

<h4 id="Scraper-v1-Program-Arguments"><a href="#Scraper-v1-Program-Arguments" class="headerlink" title="Scraper v1 - Program Arguments"></a>Scraper v1 - Program Arguments</h4><p>Let’s start by making our program accept some arguments that will allow us to customize our search. Here are some useful parameters:</p>
<ul>
<li>keyword to search</li>
<li>subreddit restriction (optional)</li>
<li>date restriction (optional)</li>
</ul>
<p>Let’s say we want to search for the keyword “web scraping”. In this case, the URL we want to go is:<br><code>https://old.reddit.com/search?q=%22web+scraping%22</code></p>
<p>If we want to limit our search with a particular subreddit such as “r/Python”, then our URL will become:<br><code>https://old.reddit.com/r/Python/search?q=%22web+scraping%22&amp;restrict_sr=on</code></p>
<p>Finally, the URL is going to look like one of the following if we want to search for the posts submitted in the last year:<br><code>https://old.reddit.com/search?q=%22web+scraping%22&amp;t=year</code><br><code>https://old.reddit.com/r/Python/search?q=%22web+scraping%22&amp;restrict_sr=on&amp;t=year</code></p>
<p>The following is the initial version of our program that builds and prints the appropriate URL according to the program arguments:</p>
<figure class="highlight python"><figcaption><span>scraper.py (v1)</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">SITE_URL = <span class="string">&#x27;https://old.reddit.com/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--keyword&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;keyword to search&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--subreddit&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;optional subreddit restriction&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--date&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;optional date restriction (day, week, month or year)&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.subreddit == <span class="literal">None</span>:</span><br><span class="line">        searchUrl = SITE_URL + <span class="string">&#x27;search?q=&quot;&#x27;</span> + args.keyword + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        searchUrl = SITE_URL + <span class="string">&#x27;r/&#x27;</span> + args.subreddit + <span class="string">&#x27;/search?q=&quot;&#x27;</span> + args.keyword + <span class="string">&#x27;&quot;&amp;restrict_sr=on&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> args.date == <span class="string">&#x27;day&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;week&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;month&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;year&#x27;</span>:</span><br><span class="line">        searchUrl += <span class="string">&#x27;&amp;t=&#x27;</span> + args.date</span><br><span class="line">    print(<span class="string">&#x27;Search URL:&#x27;</span>, searchUrl)</span><br></pre></td></tr></table></figure>
<p>Now we can run our program as follows:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python3 scraper.py --keyword=<span class="string">&quot;dave weckl&quot;</span> --subreddit=<span class="string">&quot;drums&quot;</span> --date=<span class="string">&quot;month&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="Scraper-v2-Collecting-Search-Results"><a href="#Scraper-v2-Collecting-Search-Results" class="headerlink" title="Scraper v2 - Collecting Search Results"></a>Scraper v2 - Collecting Search Results</h4><p>If you take a look at the page source, you’ll notice that all the post results are stored in <code>&lt;div&gt;</code>s with a <code>search-result-link</code> class. Also note that unless it’s the last page, there will be an <code>&lt;a&gt;</code> tag with a <code>&lt;rel&gt;</code> attribute equal to <code>nofollow next</code>. That’s how we’ll know when to stop advancing to the next page.</p>
<p>Therefore using the URL we built from the program arguments, we can collect the post sections from all pages with a simple function that we’ll call <code>getSearchResults</code>. Here’s the second version of our program:</p>
<figure class="highlight python"><figcaption><span>scraper.py (v2)</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">SITE_URL = <span class="string">&#x27;https://old.reddit.com/&#x27;</span></span><br><span class="line">REQUEST_AGENT = <span class="string">&#x27;Mozilla/5.0 Chrome/47.0.2526.106 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSoup</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">return</span> BeautifulSoup(requests.get(url, headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:REQUEST_AGENT&#125;).text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSearchResults</span>(<span class="params">searchUrl</span>):</span></span><br><span class="line">    posts = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resultPage = createSoup(searchUrl)</span><br><span class="line">        posts += resultPage.findAll(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-result-link&#x27;</span>&#125;)</span><br><span class="line">        footer = resultPage.findAll(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;rel&#x27;</span>:<span class="string">&#x27;nofollow next&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> footer:</span><br><span class="line">            searchUrl = footer[-<span class="number">1</span>][<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> posts</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--keyword&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;keyword to search&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--subreddit&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;optional subreddit restriction&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--date&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;optional date restriction (day, week, month or year)&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.subreddit == <span class="literal">None</span>:</span><br><span class="line">        searchUrl = SITE_URL + <span class="string">&#x27;search?q=&quot;&#x27;</span> + args.keyword + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        searchUrl = SITE_URL + <span class="string">&#x27;r/&#x27;</span> + args.subreddit + <span class="string">&#x27;/search?q=&quot;&#x27;</span> + args.keyword + <span class="string">&#x27;&quot;&amp;restrict_sr=on&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> args.date == <span class="string">&#x27;day&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;week&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;month&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;year&#x27;</span>:</span><br><span class="line">        searchUrl += <span class="string">&#x27;&amp;t=&#x27;</span> + args.date</span><br><span class="line">    posts = getSearchResults(searchUrl)</span><br><span class="line">    print(<span class="string">&#x27;Search URL:&#x27;</span>, searchUrl, <span class="string">&#x27;\nFound&#x27;</span>, <span class="built_in">len</span>(posts), <span class="string">&#x27;posts.&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Scraper-v3-Parsing-Post-Data"><a href="#Scraper-v3-Parsing-Post-Data" class="headerlink" title="Scraper v3 - Parsing Post Data"></a>Scraper v3 - Parsing Post Data</h4><p>Now that we have a bunch of posts in the form of a <code>bs4.element.Tag</code> array, we can extract useful information by parsing each element of this array further. We can extract information such as:</p>
<table>
<thead>
<tr>
<th align="left">Information</th>
<th align="left">Source</th>
</tr>
</thead>
<tbody><tr>
<td align="left">date</td>
<td align="left"><code>datetime</code> attribute of the <code>&lt;time&gt;</code> tag</td>
</tr>
<tr>
<td align="left">title</td>
<td align="left"><code>&lt;a&gt;</code> tag with <code>search-title</code> class</td>
</tr>
<tr>
<td align="left">score</td>
<td align="left"><code>&lt;span&gt;</code> tag with <code>search-score</code> class</td>
</tr>
<tr>
<td align="left">author</td>
<td align="left"><code>&lt;a&gt;</code> tag with <code>author</code> class</td>
</tr>
<tr>
<td align="left">subreddit</td>
<td align="left"><code>&lt;a&gt;</code> tag with <code>search-subreddit-link</code> class</td>
</tr>
<tr>
<td align="left">URL</td>
<td align="left"><code>href</code> attribute of the <code>&lt;a&gt;</code> tag with <code>search-comments</code> class</td>
</tr>
<tr>
<td align="left"># of comments</td>
<td align="left">text field of the <code>&lt;a&gt;</code> tag with <code>search-comments</code> class</td>
</tr>
</tbody></table>
<p>We’re also going to create a container object to store the extracted data and save it as a JSON file (<code>product.json</code>). We’ll load this file in the beginning of our program which may contain data from other keyword searches. When we’re done scraping the current keyword, we’ll append the new content to the existing data. Here’s the third version of our program:</p>
<figure class="highlight python"><figcaption><span>scraper.py (v3)</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">SITE_URL = <span class="string">&#x27;https://old.reddit.com/&#x27;</span></span><br><span class="line">REQUEST_AGENT = <span class="string">&#x27;Mozilla/5.0 Chrome/47.0.2526.106 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSoup</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">return</span> BeautifulSoup(requests.get(url, headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:REQUEST_AGENT&#125;).text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSearchResults</span>(<span class="params">searchUrl</span>):</span></span><br><span class="line">    posts = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resultPage = createSoup(searchUrl)</span><br><span class="line">        posts += resultPage.findAll(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-result-link&#x27;</span>&#125;)</span><br><span class="line">        footer = resultPage.findAll(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;rel&#x27;</span>:<span class="string">&#x27;nofollow next&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> footer:</span><br><span class="line">            searchUrl = footer[-<span class="number">1</span>][<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> posts</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePosts</span>(<span class="params">posts, product, keyword</span>):</span></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">        time = post.find(<span class="string">&#x27;time&#x27;</span>)[<span class="string">&#x27;datetime&#x27;</span>]</span><br><span class="line">        date = datetime.strptime(time[:<span class="number">19</span>], <span class="string">&#x27;%Y-%m-%dT%H:%M:%S&#x27;</span>)</span><br><span class="line">        title = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-title&#x27;</span>&#125;).text</span><br><span class="line">        score = post.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-score&#x27;</span>&#125;).text</span><br><span class="line">        score = <span class="built_in">int</span>(re.match(<span class="string">r&#x27;[+-]?\d+&#x27;</span>, score).group(<span class="number">0</span>))</span><br><span class="line">        author = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;author&#x27;</span>&#125;).text</span><br><span class="line">        subreddit = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-subreddit-link&#x27;</span>&#125;).text</span><br><span class="line">        commentsTag = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-comments&#x27;</span>&#125;)</span><br><span class="line">        url = commentsTag[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        numComments = <span class="built_in">int</span>(re.match(<span class="string">r&#x27;\d+&#x27;</span>, commentsTag.text).group(<span class="number">0</span>))</span><br><span class="line">        product[keyword].append(&#123;<span class="string">&#x27;title&#x27;</span>:title, <span class="string">&#x27;url&#x27;</span>:url, <span class="string">&#x27;date&#x27;</span>:<span class="built_in">str</span>(date),</span><br><span class="line">                                 <span class="string">&#x27;score&#x27;</span>:score, <span class="string">&#x27;author&#x27;</span>:author, <span class="string">&#x27;subreddit&#x27;</span>:subreddit&#125;)</span><br><span class="line">    <span class="keyword">return</span> product</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--keyword&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;keyword to search&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--subreddit&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;optional subreddit restriction&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--date&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;optional date restriction (day, week, month or year)&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.subreddit == <span class="literal">None</span>:</span><br><span class="line">        searchUrl = SITE_URL + <span class="string">&#x27;search?q=&quot;&#x27;</span> + args.keyword + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        searchUrl = SITE_URL + <span class="string">&#x27;r/&#x27;</span> + args.subreddit + <span class="string">&#x27;/search?q=&quot;&#x27;</span> + args.keyword + <span class="string">&#x27;&quot;&amp;restrict_sr=on&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> args.date == <span class="string">&#x27;day&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;week&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;month&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;year&#x27;</span>:</span><br><span class="line">        searchUrl += <span class="string">&#x27;&amp;t=&#x27;</span> + args.date</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        product = json.load(<span class="built_in">open</span>(<span class="string">&#x27;product.json&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">&#x27;WARNING: Database file not found. Creating a new one...&#x27;</span>)</span><br><span class="line">        product = &#123;&#125;</span><br><span class="line">    print(<span class="string">&#x27;Search URL:&#x27;</span>, searchUrl)</span><br><span class="line">    posts = getSearchResults(searchUrl)</span><br><span class="line">    print(<span class="string">&#x27;Started scraping&#x27;</span>, <span class="built_in">len</span>(posts), <span class="string">&#x27;posts.&#x27;</span>)</span><br><span class="line">    keyword = args.keyword.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    product[keyword] = []</span><br><span class="line">    product = parsePosts(posts, product, keyword)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;product.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(product, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>Now we can search for different keywords by running our program multiple times. The extracted data will be appended to the <code>product.json</code> file after each execution.</p>
<h4 id="Scraper-v4-Scraping-Comments"><a href="#Scraper-v4-Scraping-Comments" class="headerlink" title="Scraper v4 - Scraping Comments"></a>Scraper v4 - Scraping Comments</h4><p>So far we’ve been able to scrape information from the post results easily, since this information is available in a given results page. But we might also want to scrape comment information which cannot be accessed from the results page. We must instead parse the comment page of each indiviadual post using the URL that we previously extract in our <code>parsePosts</code> funciton. </p>
<p>If you take a close look at the HTML source of a comment page such as <a href="https://old.reddit.com/r/ProgrammerHumor/comments/7htzqt/junior_devs_vs_senior_devs/">this one</a>, you’ll see that the comments are located inside a <code>&lt;div&gt;</code> with a <code>sitetable nestedlisting</code> class. Each comment inside this <code>&lt;div&gt;</code> is stored in another <code>&lt;div&gt;</code> with a <code>data-type</code> attribute equal to <code>comment</code>. From there, we can obtain some useful information such as:</p>
<table>
<thead>
<tr>
<th align="left">Information</th>
<th align="left">Source</th>
</tr>
</thead>
<tbody><tr>
<td align="left"># of replies</td>
<td align="left"><code>data-replies</code> attribute</td>
</tr>
<tr>
<td align="left">author</td>
<td align="left"><code>&lt;a&gt;</code> tag with <code>author</code> class inside the <code>&lt;p&gt;</code> tag with <code>tagline</code> class</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left"><code>datetime</code> attribute in the <code>&lt;time&gt;</code> tag inside the <code>&lt;p&gt;</code> tag with <code>tagline</code> class</td>
</tr>
<tr>
<td align="left">comment ID</td>
<td align="left"><code>name</code> attribute in the <code>&lt;a&gt;</code> tag inside the <code>&lt;p&gt;</code> tag with <code>parent</code> class</td>
</tr>
<tr>
<td align="left">parent ID</td>
<td align="left"><code>&lt;a&gt;</code> tag with the <code>data-event-action</code> attribute equal to <code>parent</code></td>
</tr>
<tr>
<td align="left">text</td>
<td align="left">text field of the <code>&lt;div&gt;</code> tag with <code>md</code> class</td>
</tr>
<tr>
<td align="left">score</td>
<td align="left">text field of the <code>&lt;span&gt;</code> tag with <code>score unvoted</code> class</td>
</tr>
</tbody></table>
<p>Let’s create a new function called <code>parseComments</code> and call it from our <code>parsePosts</code> function so that we can get the comment data along with the post data:</p>
<figure class="highlight python"><figcaption><span>scraper.py (v4 - partial)</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseComments</span>(<span class="params">commentsUrl</span>):</span></span><br><span class="line">    commentTree = &#123;&#125;</span><br><span class="line">    commentsPage = createSoup(commentsUrl)</span><br><span class="line">    commentsDiv = commentsPage.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;sitetable nestedlisting&#x27;</span>&#125;)</span><br><span class="line">    comments = commentsDiv.findAll(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;data-type&#x27;</span>:<span class="string">&#x27;comment&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">for</span> comment <span class="keyword">in</span> comments:</span><br><span class="line">        numReplies = <span class="built_in">int</span>(comment[<span class="string">&#x27;data-replies&#x27;</span>])</span><br><span class="line">        tagline = comment.find(<span class="string">&#x27;p&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;tagline&#x27;</span>&#125;)</span><br><span class="line">        author = tagline.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;author&#x27;</span>&#125;)</span><br><span class="line">        author = <span class="string">&quot;[deleted]&quot;</span> <span class="keyword">if</span> author == <span class="literal">None</span> <span class="keyword">else</span> author.text</span><br><span class="line">        date = tagline.find(<span class="string">&#x27;time&#x27;</span>)[<span class="string">&#x27;datetime&#x27;</span>]</span><br><span class="line">        date = datetime.strptime(date[:<span class="number">19</span>], <span class="string">&#x27;%Y-%m-%dT%H:%M:%S&#x27;</span>)</span><br><span class="line">        commentId = comment.find(<span class="string">&#x27;p&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;parent&#x27;</span>&#125;).find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        content = comment.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;md&#x27;</span>&#125;).text.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        score = comment.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;score unvoted&#x27;</span>&#125;)</span><br><span class="line">        score = <span class="number">0</span> <span class="keyword">if</span> score == <span class="literal">None</span> <span class="keyword">else</span> <span class="built_in">int</span>(re.match(<span class="string">r&#x27;[+-]?\d+&#x27;</span>, score.text).group(<span class="number">0</span>))</span><br><span class="line">        parent = comment.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;data-event-action&#x27;</span>:<span class="string">&#x27;parent&#x27;</span>&#125;)</span><br><span class="line">        parentId = parent[<span class="string">&#x27;href&#x27;</span>][<span class="number">1</span>:] <span class="keyword">if</span> parent != <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        parentId = <span class="string">&#x27;&#x27;</span> <span class="keyword">if</span> parentId == commentId <span class="keyword">else</span> parentId</span><br><span class="line">        commentTree[commentId] = &#123;<span class="string">&#x27;author&#x27;</span>:author, <span class="string">&#x27;reply-to&#x27;</span>:parentId, <span class="string">&#x27;text&#x27;</span>:content,</span><br><span class="line">                                  <span class="string">&#x27;score&#x27;</span>:score, <span class="string">&#x27;num-replies&#x27;</span>:numReplies, <span class="string">&#x27;date&#x27;</span>:<span class="built_in">str</span>(date)&#125;</span><br><span class="line">    <span class="keyword">return</span> commentTree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePosts</span>(<span class="params">posts, product, keyword</span>):</span></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">        time = post.find(<span class="string">&#x27;time&#x27;</span>)[<span class="string">&#x27;datetime&#x27;</span>]</span><br><span class="line">        date = datetime.strptime(time[:<span class="number">19</span>], <span class="string">&#x27;%Y-%m-%dT%H:%M:%S&#x27;</span>)</span><br><span class="line">        title = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-title&#x27;</span>&#125;).text</span><br><span class="line">        score = post.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-score&#x27;</span>&#125;).text</span><br><span class="line">        score = <span class="built_in">int</span>(re.match(<span class="string">r&#x27;[+-]?\d+&#x27;</span>, score).group(<span class="number">0</span>))</span><br><span class="line">        author = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;author&#x27;</span>&#125;).text</span><br><span class="line">        subreddit = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-subreddit-link&#x27;</span>&#125;).text</span><br><span class="line">        commentsTag = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-comments&#x27;</span>&#125;)</span><br><span class="line">        url = commentsTag[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        numComments = <span class="built_in">int</span>(re.match(<span class="string">r&#x27;\d+&#x27;</span>, commentsTag.text).group(<span class="number">0</span>))</span><br><span class="line">        commentTree = &#123;&#125; <span class="keyword">if</span> numComments == <span class="number">0</span> <span class="keyword">else</span> parseComments(url)</span><br><span class="line">        product[keyword].append(&#123;<span class="string">&#x27;title&#x27;</span>:title, <span class="string">&#x27;url&#x27;</span>:url, <span class="string">&#x27;date&#x27;</span>:<span class="built_in">str</span>(date), <span class="string">&#x27;score&#x27;</span>:score,</span><br><span class="line">                                 <span class="string">&#x27;author&#x27;</span>:author, <span class="string">&#x27;subreddit&#x27;</span>:subreddit, <span class="string">&#x27;comments&#x27;</span>:commentTree&#125;)</span><br><span class="line">    <span class="keyword">return</span> product</span><br></pre></td></tr></table></figure>
<h4 id="Scraper-v5-Multiprocessing"><a href="#Scraper-v5-Multiprocessing" class="headerlink" title="Scraper v5 - Multiprocessing"></a>Scraper v5 - Multiprocessing</h4><p>Our program is functionally complete at this point. However, it runs a bit slowly because all the work is done serially by a single process. We can improve the performance by handling the posts by multiple processes using the <code>Process</code> and <code>Manager</code> objects from the <code>multiprocessing</code> library.</p>
<p>The first thing we need to do is to rename the <code>parsePosts</code> function and make it handle only a single post. To do that, we’re simply going to remove the <code>for</code> statement. We also need to change the function parameters a little bit. Instead of passing our original product object, we’ll pass a list object to append the results obtained by the current process.</p>
<figure class="highlight python"><figcaption><span>scraper.py (v5 - partial)</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePost</span>(<span class="params">post, results</span>):</span></span><br><span class="line">    time = post.find(<span class="string">&#x27;time&#x27;</span>)[<span class="string">&#x27;datetime&#x27;</span>]</span><br><span class="line">    date = datetime.strptime(time[:<span class="number">19</span>], <span class="string">&#x27;%Y-%m-%dT%H:%M:%S&#x27;</span>)</span><br><span class="line">    title = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-title&#x27;</span>&#125;).text</span><br><span class="line">    score = post.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-score&#x27;</span>&#125;).text</span><br><span class="line">    score = <span class="built_in">int</span>(re.match(<span class="string">r&#x27;[+-]?\d+&#x27;</span>, score).group(<span class="number">0</span>))</span><br><span class="line">    author = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;author&#x27;</span>&#125;).text</span><br><span class="line">    subreddit = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-subreddit-link&#x27;</span>&#125;).text</span><br><span class="line">    commentsTag = post.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;search-comments&#x27;</span>&#125;)</span><br><span class="line">    url = commentsTag[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    numComments = <span class="built_in">int</span>(re.match(<span class="string">r&#x27;\d+&#x27;</span>, commentsTag.text).group(<span class="number">0</span>))</span><br><span class="line">    commentTree = &#123;&#125; <span class="keyword">if</span> numComments == <span class="number">0</span> <span class="keyword">else</span> parseComments(url)</span><br><span class="line">    results.append(&#123;<span class="string">&#x27;title&#x27;</span>:title, <span class="string">&#x27;url&#x27;</span>:url, <span class="string">&#x27;date&#x27;</span>:<span class="built_in">str</span>(date), <span class="string">&#x27;score&#x27;</span>:score,</span><br><span class="line">                    <span class="string">&#x27;author&#x27;</span>:author, <span class="string">&#x27;subreddit&#x27;</span>:subreddit, <span class="string">&#x27;comments&#x27;</span>:commentTree&#125;)</span><br></pre></td></tr></table></figure>
<p><code>results</code> is actually a <code>multiprocessing.managers.ListProxy</code> object that we can use to accumulate the output generated by all processes. We’ll later convert it to a regular list and save it in our product. Our main script will now look like as follows:</p>
<figure class="highlight python"><figcaption><span>scraper.py (v5 - partial)</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--keyword&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;keyword to search&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--subreddit&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;optional subreddit restriction&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--date&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;optional date restriction (day, week, month or year)&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.subreddit == <span class="literal">None</span>:</span><br><span class="line">        searchUrl = SITE_URL + <span class="string">&#x27;search?q=&quot;&#x27;</span> + args.keyword + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        searchUrl = SITE_URL + <span class="string">&#x27;r/&#x27;</span> + args.subreddit + <span class="string">&#x27;/search?q=&quot;&#x27;</span> + args.keyword + <span class="string">&#x27;&quot;&amp;restrict_sr=on&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> args.date == <span class="string">&#x27;day&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;week&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;month&#x27;</span> <span class="keyword">or</span> args.date == <span class="string">&#x27;year&#x27;</span>:</span><br><span class="line">        searchUrl += <span class="string">&#x27;&amp;t=&#x27;</span> + args.date</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        product = json.load(<span class="built_in">open</span>(<span class="string">&#x27;product.json&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">&#x27;WARNING: Database file not found. Creating a new one...&#x27;</span>)</span><br><span class="line">        product = &#123;&#125;</span><br><span class="line">    print(<span class="string">&#x27;Search URL:&#x27;</span>, searchUrl)</span><br><span class="line">    posts = getSearchResults(searchUrl)</span><br><span class="line">    print(<span class="string">&#x27;Started scraping&#x27;</span>, <span class="built_in">len</span>(posts), <span class="string">&#x27;posts.&#x27;</span>)</span><br><span class="line">    keyword = args.keyword.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    results = Manager().<span class="built_in">list</span>()</span><br><span class="line">    jobs = []</span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">        job = Process(target=parsePost, args=(post, results))</span><br><span class="line">        jobs.append(job)</span><br><span class="line">        job.start()</span><br><span class="line">    <span class="keyword">for</span> job <span class="keyword">in</span> jobs:</span><br><span class="line">        job.join()</span><br><span class="line">    product[keyword] = <span class="built_in">list</span>(results)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;product.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(product, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>This simple technique alone will greatly speed-up the performance. For instance when I perform a search involving 163 posts in my machine, the serial version of the program takes 150 seconds to execute, corresponding to approximately 1 post per second. On the other hand, the parallel version only takes 15 seconds to execute (~10 posts per second) which is 10x faster.</p>
<p>You can check out the complete <a href="https://github.com/utkuufuk/reddit-scraper">source code on Github</a>. Also, make sure to <a href="/subscribe">subscribe</a> to get updates on my future articles.</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Web Scraping</tag>
      </tags>
  </entry>
  <entry>
    <title>How I Manage My Side-Projects Using Trello</title>
    <url>/2020/03/20/trello-project-manage/</url>
    <content><![CDATA[<p>For the last few years, I’ve been spending a lot of my free time working on side-projects. What I came to realize is that it’s quite important that I plan ahead and work in an organized fashion except for very small projects. Trello is one of my favorite software tools ever, and I’m going to talk about how I manage my current side-project using its free version in this article.</p>
<a id="more"></a>

<h4 id="Why-Tho"><a href="#Why-Tho" class="headerlink" title="Why Tho?"></a>Why Tho?</h4><p>I’m sure some people see this whole side-project management thing as an unnecessary overhead that’s just going to slow them down. But here’s the thing:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Heading towards the finish line on a side project <a href="https://t.co/wHVJJBMDbx">pic.twitter.com/wHVJJBMDbx</a></p>&mdash; I Am Devloper (@iamdevloper) <a href="https://twitter.com/iamdevloper/status/1240029324423704576?ref_src=twsrc%5Etfw">March 17, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>At the end of the day, you want to turn a cool idea into reality, on your own. That’s pretty much the meaning of a side-project. However, ideas lead to more ideas, as well as new problems to be solved. Sooner or later your head will explode because of every little thing you have to keep in mind (issues, ideas, problems, suggestions) about your project. If you use something like Trello, you can forget about all that until you have to actually deal with them.</p>
<h4 id="Demo-Project-TodoDock"><a href="#Demo-Project-TodoDock" class="headerlink" title="Demo Project: TodoDock"></a>Demo Project: TodoDock</h4><p>Before talking about how I manage it, let me briefly tell you about <a href="https://tododock.com/">TodoDock</a>, the side-project that I’ve been working on for the last few months. In a nutshell, TodoDock lets you keep track of your periodic tasks and sends you a reminder whenever one of your tasks is due soon. The task timers don’t get automatically reset unlike repeating calendar events; you have to reset the timer manually. Therefore you won’t receive another reminder until you’ve actually waited for another full period since the last time you’ve completed the task. Here’s what it looks like:</p>
<img src="/2020/03/20/trello-project-manage/tododock.png" class="">

<p>The current state (March 2020) of the app can be categorized as an MVP at best, as there’s still a lot of work to be done. And that’s where Trello comes into play:</p>
<img src="/2020/03/20/trello-project-manage/board-overview.png" class="">

<h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><p>As you can see, I have three lists on the board: <em>Icebox</em>, <em>Backlog</em> and <em>Active</em>. Each task that I’m planning to work on soon is inside one of these. Obviously, the number of lists and the list names can be adjusted according to personal preference, as well as the size &amp; nature of the project at hand. I have this particular setup because</p>
<ul>
<li>I like to separate high-priority tasks (<em>Backlog</em>) from low-priority ones (<em>Icebox</em>)</li>
<li>I like to see the things I’m currently working on in a separate list (<em>Active</em>)</li>
</ul>
<h4 id="Cards-Tasks-and-Labels"><a href="#Cards-Tasks-and-Labels" class="headerlink" title="Cards, Tasks and Labels"></a>Cards, Tasks and Labels</h4><p>Each card is a task. Simple as that. Here’s how I label my tasks:</p>
<ul>
<li><strong><em>Backend:</em></strong> server-side coding</li>
<li><strong><em>Frontend:</em></strong> client-side coding</li>
<li><strong><em>Test:</em></strong> requires creating new tests</li>
<li><strong><em>DevOps:</em></strong> server administration/configuration, deployment, CI/CD and so on</li>
<li><strong><em>User Request:</em></strong> a feature request from one of the existing users</li>
<li><strong><em>Bug:</em></strong> pest control</li>
<li><strong><em>Other:</em></strong> none of the above</li>
</ul>
<p>I assign labels to tasks primarily because then I can estimate their difficulties and priorities more accurately. The difficulty usually ends up higher if it has more than one of the first 4 labels. Similarly, the priority tends to increase if it has a <em>User Request</em> or a <em>Bug</em> label. More on priority and difficulty later…</p>
<p>I just archive a task after completing it. I can always view an archived task if I need to. Here’s a task that I’ve archived recently:</p>
<img src="/2020/03/20/trello-project-manage/sample-task.png" class="">

<p>I’m a big fan of using checklists to break tasks into even smaller steps. That way I can get a feeling of the progress I’ve made, which helps a lot especially for difficult tasks. Also, I link the Github PR in the description so that it’s easy to see the corresponding changes if I ever want to. </p>
<h4 id="Butler-and-Custom-Fields"><a href="#Butler-and-Custom-Fields" class="headerlink" title="Butler and Custom Fields"></a>Butler and Custom Fields</h4><p>There are a bunch of <a href="https://trello.com/power-ups">power-ups</a> you can use on your board. You get only 1 power-up per board with the free version. You also get a default power-up called <a href="https://help.trello.com/article/1198-an-intro-to-butler">Butler</a> which you can use to bring some automation to your board:</p>
<blockquote><p>“Free Trello accounts also include a small taste of Butler with limited functionality.”</p>
<footer><strong>Trello Help</strong><cite><a href="https://help.trello.com/article/1181-butler-features-and-quotas">help.trello.com/article/1181-butler-features-and-quotas</a></cite></footer></blockquote>

<p>Even that small taste of Butler can actually prove very useful. I used it to define a <em>board button</em> for sorting the tasks by priority and difficulty. You can actually see that button in the board overview screenshot above. It’s called <em>Sort by Priority</em> and it appears next to the <em>Show Menu</em> button.</p>
<p>The problem is, you can’t assign a priority or a difficulty attribute to Trello cards by default. That’s why I spent my power-up slot on <a href="https://trello.com/power-ups/56d5e249a98895a9797bebb9/custom-fields">Custom Fields</a>, which lets you define … wait for it … custom fields! Combined with Butler, it lets me sort all the cards within each list automatically. Here’s my <em>Sort by Priority</em> command:</p>
<img src="/2020/03/20/trello-project-manage/butler-sort-command.png" class="">

<p>You can see that the button triggers a command that runs a sequence of actions, top to bottom. That allows me to sort the equal-priority tasks additionally by their difficulty attributes. If you look at the screenshot of the board again, you’ll see that the tasks in each list are indeed sorted by those rules.</p>
<h4 id="Other-Cool-Power-Ups"><a href="#Other-Cool-Power-Ups" class="headerlink" title="Other Cool Power-Ups"></a>Other Cool Power-Ups</h4><p>There are a few other power-ups that I would use if I didn’t have to upgrade to a paid account. I’ll just talk about a couple of those, in case some of you prefer them over <em>Custom Fields</em>.</p>
<ul>
<li><p><strong><em><a href="https://screenful.com/card-dependencies-for-trello">Card Dependencies</a>:</em></strong> It would be great to see if a task blocks (or is blocked by) other tasks. For instance, in my <em>Archive</em> list, there’s a task for automatically sending reminder emails to users. That task is in fact blocked by the two tasks above it, but it’s not obvious that there’s a dependency relationship between them.</p>
</li>
<li><p><strong><em><a href="https://trello.com/power-ups/55a5d916446f517774210004/github">Github</a>:</em></strong> This lets you attach pull requests, issues and branches to your cards. You can see visual badges directly from the board view indicating whether a PR has been merged, the status checks and so on.</p>
</li>
</ul>
<h4 id="Bonus-Tips-amp-Tricks"><a href="#Bonus-Tips-amp-Tricks" class="headerlink" title="Bonus Tips &amp; Tricks"></a>Bonus Tips &amp; Tricks</h4><blockquote><p>Here’s my ten cents, my two cents is free.</p>
<footer><strong>Marshall Bruce Mathers III</strong><cite>Philosopher</cite></footer></blockquote>

<h5 id="When-to-create-new-tasks"><a href="#When-to-create-new-tasks" class="headerlink" title="When to create new tasks"></a>When to create new tasks</h5><p>My board isn’t a complete collection of everything that needs to be done. I create new tasks only when they become obvious to me while I work on the existing ones. Why, you ask?</p>
<ul>
<li>It’s impossible to think of every little thing in advance, and certainly not fun.</li>
<li>There’s no benefit in creating a task which I’m not going to start working on soon.</li>
<li>I rarely have to delete/update a task if I’ve created it soon before I start working on it.</li>
</ul>
<h5 id="Deciding-what-to-work-on-next"><a href="#Deciding-what-to-work-on-next" class="headerlink" title="Deciding what to work on next"></a>Deciding what to work on next</h5><p>I always assign an approximate priority &amp; difficulty to new tasks, because I strongly believe that it’s important to work on what matters the most right now. For example, spending my time on making task groups collapsable (2nd task in <em>Icebox</em>, a nice-to-have visual feature) wouldn’t be a great idea when I haven’t even set up automated reminder emails yet, which is a core feature of TodoDock. So I put the low-priority (&lt;=2) tasks into <em>Icebox</em> and high-priority ones into <em>Backlog</em>. After all the tasks are sorted, I just start working on the topmost task in <em>Backlog</em>, the lowest hanging fruit.</p>
<h5 id="Limiting-the-task-scope"><a href="#Limiting-the-task-scope" class="headerlink" title="Limiting the task scope"></a>Limiting the task scope</h5><p>I try to make my tasks as small as possible. I can mention quite a few reasons for that:</p>
<ul>
<li>Big tasks look scary to get started.</li>
<li>It’s easier to focus on smaller tasks.</li>
<li>It’s easier to write tests for smaller features.</li>
<li>It’s easier to revert a change (using Git) if it has a clear scope.</li>
<li>It’s hard to break big tasks into a few checklist items for progress tracking.</li>
<li>A big task might contain sub-tasks with different priority levels, which can be scheduled independently.</li>
</ul>
<p>That’s it, I hope you found this useful. Feel free to <a href="/about">reach out</a> if you have any comments or questions. Also, don’t forget to <a href="/subscribe">subscribe</a> if you want to get notified when I post new stuff.</p>
]]></content>
      <tags>
        <tag>Trello</tag>
        <tag>Project Management</tag>
      </tags>
  </entry>
  <entry>
    <title>One-vs-All Classification Using Logistic Regression</title>
    <url>/2018/06/03/one-vs-all-classification/</url>
    <content><![CDATA[<a href="/2018/05/19/binary-logistic-regression/" title="Previously">Previously</a>, we talked about how to build a binary classifier by implementing our own logistic regression model in Python. In this post, we're going to build upon that existing model and turn it into a multi-class classifier using an approach called one-vs-all classification.

<a id="more"></a>

<h4 id="One-vs-All-Classification"><a href="#One-vs-All-Classification" class="headerlink" title="One-vs-All Classification"></a>One-vs-All Classification</h4><p>First of all, let me briefly explain the idea behind one-vs-all classification. Say we have a classification problem and there are $N$ distinct classes. In this case, we’ll have to train a multi-class classifier instead of a binary one.</p>
<p>One-vs-all classification is a method which involves training $N$ distinct binary classifiers, each designed for recognizing a particular class. Then those $N$ classifiers are collectively used for multi-class classification as demonstrated below:</p>
<img src="/2018/06/03/one-vs-all-classification/one-vs-all.png" class="">
<br>

<p>We already know from the <a href="/2018/05/19/binary-logistic-regression/" title="previous post">previous post</a> how to train a binary classifier using logistic regression. So the only thing we have to do now really is to train $N$ binary classifiers instead of just one. And that’s pretty much it.</p>
<h4 id="Problem-amp-Dataset"><a href="#Problem-amp-Dataset" class="headerlink" title="Problem &amp; Dataset"></a>Problem &amp; Dataset</h4><p>We’re going to use this one-vs-all approach to solve a multi-class classification problem from the <a href="https://www.coursera.org/learn/machine-learning">machine learning course</a> thought by Andrew Ng. The goal in this problem is to identify digits from 0 to 9 by looking at 20x20 pixel drawings.</p>
<p>Here the number of classes $N$ is equal to 10, which is the number of different digits. We’re going to treat each pixel as an individual feature, which adds up to 400 features per image. Here are some examples from our training sample of 5000 images:</p>
<img src="/2018/06/03/one-vs-all-classification/examples-from-dataset.png" class="">
<br>

<p>The training data is stored in a file called <a href="/2018/06/03/one-vs-all-classification/digits.mat" title="digits.mat">digits.mat</a>. The reason that it’s a <strong><code>.mat</code></strong> file is because this problem is originally a Matlab assignment. No big deal, since it’s pretty easy to import a <strong><code>.mat</code></strong> file in Python using the <strong><code>loadmat</code></strong> function from the <strong><code>scipy.io</code></strong> module. Here’s how to do it:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> sio</span><br><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> opt</span><br><span class="line"></span><br><span class="line">data = sio.loadmat(<span class="string">&quot;digits.mat&quot;</span>)</span><br><span class="line">x = data[<span class="string">&#x27;X&#x27;</span>] <span class="comment"># the feature matrix is labeled with &#x27;X&#x27; inside the file</span></span><br><span class="line">y = np.squeeze(data[<span class="string">&#x27;y&#x27;</span>]) <span class="comment"># the target variable vector is labeled with &#x27;y&#x27; inside the file</span></span><br><span class="line">np.place(y, y == <span class="number">10</span>, <span class="number">0</span>) <span class="comment"># replace the label 10 with 0</span></span><br><span class="line">numExamples = x.shape[<span class="number">0</span>] <span class="comment"># 5000 examples</span></span><br><span class="line">numFeatures = x.shape[<span class="number">1</span>] <span class="comment"># 400 features</span></span><br><span class="line">numLabels = <span class="number">10</span> <span class="comment"># digits from 0 to 9</span></span><br></pre></td></tr></table></figure>
<p>Let me point out two things here:</p>
<ol>
<li><p>We’re using the <strong><code>squeeze</code></strong> function on the <strong><code>y</code></strong> array in order to explicitly make it one dimensional. We’re doing this because <strong><code>y</code></strong> is stored as a 2D matrix in the <strong><code>.mat</code></strong> file although it’s actually a 1D array.</p>
</li>
<li><p>We’re replacing the label 10 with 0. This label actually stands for the digit 0 but it was converted to 10 because of array indexing issues in Matlab.</p>
</li>
</ol>
<img src="/2018/06/03/one-vs-all-classification/matlab-index.png" class="">
<br>

<h4 id="Logistic-Regression-Recap"><a href="#Logistic-Regression-Recap" class="headerlink" title="Logistic Regression Recap"></a>Logistic Regression Recap</h4><p>Remember the <strong><code>sigmoid</code></strong>, <strong><code>cost</code></strong> and <strong><code>cost_gradient</code></strong> functions that we’ve come up with while training a logistic regression model in the <a href="/2018/05/19/binary-logistic-regression/" title="previous post">previous post</a>? Here we can reuse these functions exactly as they are, because we’re going to train nothing but logistic regression models also in this problem.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">    predictions = sigmoid(X @ theta)</span><br><span class="line">    predictions[predictions == <span class="number">1</span>] = <span class="number">0.999</span> <span class="comment"># log(1)=0 causes error in division</span></span><br><span class="line">    error = -y * np.log(predictions) - (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - predictions);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(error) / <span class="built_in">len</span>(y);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost_gradient</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">    predictions = sigmoid(X @ theta);</span><br><span class="line">    <span class="keyword">return</span> X.transpose() @ (predictions - y) / <span class="built_in">len</span>(y)</span><br></pre></td></tr></table></figure>
<h4 id="Training-Stage"><a href="#Training-Stage" class="headerlink" title="Training Stage"></a>Training Stage</h4><p>The final thing we have to do before starting to train our multi-class classifier is to add an initial column of ones to our feature matrix to take into account the intercept term:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.ones(shape=(x.shape[<span class="number">0</span>], x.shape[<span class="number">1</span>] + <span class="number">1</span>))</span><br><span class="line">X[:, <span class="number">1</span>:] = x</span><br></pre></td></tr></table></figure>
<p>Now we’re ready to train our classifiers. Let’s create an array to store the model parameters $\theta$ for each classifier. Note that we need 10 sets of model parameters, each consisting of 401 parameters including the intercept term:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classifiers = np.zeros(shape=(numLabels, numFeatures + <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>Then we’re going to train 10 binary classifiers targeted for each digit inside a <strong><code>for</code></strong> loop:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, numLabels):</span><br><span class="line">    label = (y == c).astype(<span class="built_in">int</span>)</span><br><span class="line">    initial_theta = np.zeros(X.shape[<span class="number">1</span>])</span><br><span class="line">    classifiers[c, :] = opt.fmin_cg(cost, initial_theta, cost_gradient, (X, label), disp=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>Here we create a <strong><code>label</code></strong> vector in each iteration. We set its values to 1 where the corresponding values in <strong><code>y</code></strong> are equal to the current digit, and we set the rest of its values to 0. Hence the <strong><code>label</code></strong> vector acts as the target variable vector <strong><code>y</code></strong> of the binary classifier that we train for the current digit.</p>
<h4 id="Predictions"><a href="#Predictions" class="headerlink" title="Predictions"></a>Predictions</h4><p>We can evaluate the probability estimations of our optimized model for each class as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classProbabilities = sigmoid(X @ classifiers.transpose())</span><br></pre></td></tr></table></figure>
<p>This will give us a matrix of 5000 rows and 10 columns, where the columns correspond to the estimated class (digit) probabilities for all 5000 images.</p>
<p>However, we may need the final predictions of the optimized classifier instead of numerical probability estimations. We can find out our model’s predictions by simply selecting the label with the highest probability in each row :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions = classProbabilities.argmax(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>Now we have our model’s predictions as a vector with 5000 elements labeled from 0 to 9.</p>
<h4 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy"></a>Accuracy</h4><p>Finally, we can compute our model’s training accuracy by computing the percentage of successful predictions:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;Training accuracy:&quot;</span>, <span class="built_in">str</span>(<span class="number">100</span> * np.mean(predictions == y)) + <span class="string">&quot;%&quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Training accuracy: 94.54%</code></pre>
<p>An accuracy of 94.5% isn’t bad at all considering we have 10 classes and a very large number of features. Still, we could do even better if we decided to use a nonlinear model such as a neural network.</p>
<p>If you’re still here, you should <a href="%5Csubscribe">subscribe</a> to get updates on my future articles.</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Firebase to Insert Budget Transactions to Google Sheets from Trello</title>
    <url>/2018/12/20/trello-budget/</url>
    <content><![CDATA[<p>I’ve put together a <a href="https://www.youtube.com/playlist?list=PL36SguL4LIwmJTYLlnCMXG5Azrpezm4h1">YouTube Tutorial</a> on building a serverless <a href="https://firebase.google.com/">Firebase</a> application that lets you insert transaction entries into your Google budget spreadsheet just by creating a Trello card from your mobile device. Throughout the the playlist, I demonstrate how to easily create a useful cloud application by wiring together <a href="https://developers.trello.com/page/webhooks">Trello Webhooks</a>, <a href="https://developers.google.com/sheets/api/guides/concepts">Google Sheets API</a>, <a href="https://firebase.google.com/docs/firestore/">Firebase Cloud Firestore</a> and <a href="https://firebase.google.com/products/functions/?gclid=CjwKCAiAmO3gBRBBEiwA8d0Q4gWhPtXuV6PN4AxKNiKVEJShrQBMdtLwUtnBxqN16atMTD966oxjXBoC-X8QAvD_BwE">Firebase Cloud Functions</a>. </p>
<a id="more"></a>


<h4 id="Preliminaries"><a href="#Preliminaries" class="headerlink" title="Preliminaries"></a>Preliminaries</h4><p>Here’s what you need in order to follow along:</p>
<ul>
<li>You have to create a <em>monthly budget</em> template from the <a href="https://docs.google.com/spreadsheets/u/0/?ftv=1&folder=0ACoSgW1iveL-Uk9PVA">spreadsheet template gallery</a>. Check out my <a href="https://docs.google.com/spreadsheets/d/186YX-RyEyz5OcTsoI4QwIyJJMuZVc5MNTYIrF62ztiI/edit#gid=1732160294">sample sheet</a> to see what it looks like.</li>
<li>You also need a <a href="https://trello.com/signup">Trello account</a> in order to create cards and webhooks.</li>
</ul>
<h4 id="Contribute"><a href="#Contribute" class="headerlink" title="Contribute"></a>Contribute</h4><p>The source code of the app is available on Github:<br><a href="https://github.com/utkuufuk/trello-budget">https://github.com/utkuufuk/trello-budget</a></p>
<p>Feel free to contribute by providing pull requests, issues, ideas or suggestions.</p>
<p>Make sure to <a href="/subscribe">subscribe</a> if you want to get updates on my future articles.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PL36SguL4LIwmJTYLlnCMXG5Azrpezm4h1" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Google Sheets</tag>
        <tag>Budget Tracking</tag>
        <tag>JavaScript</tag>
        <tag>Trello</tag>
        <tag>Firebase</tag>
      </tags>
  </entry>
</search>
